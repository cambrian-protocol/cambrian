/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ArgparseInterface extends ethers.utils.Interface {
  functions: {
    "encodeAddress(address)": FunctionFragment;
    "encodeBytes32(bytes32)": FunctionFragment;
    "encodeUint(uint256)": FunctionFragment;
    "ingestByteStream(bytes)": FunctionFragment;
    "parseAddress(bytes32)": FunctionFragment;
    "parseBytes32(bytes32)": FunctionFragment;
    "parseUint(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "encodeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ingestByteStream",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseBytes32",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parseUint",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encodeUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ingestByteStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parseUint", data: BytesLike): Result;

  events: {};
}

export class Argparse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArgparseInterface;

  functions: {
    encodeAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeBytes32(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    encodeUint(
      _uint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ingestByteStream(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseAddress(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseBytes32(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parseUint(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  encodeAddress(_address: string, overrides?: CallOverrides): Promise<string>;

  encodeBytes32(_bytes: BytesLike, overrides?: CallOverrides): Promise<string>;

  encodeUint(_uint: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ingestByteStream(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseAddress(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseBytes32(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parseUint(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    encodeAddress(_address: string, overrides?: CallOverrides): Promise<string>;

    encodeBytes32(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    encodeUint(_uint: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ingestByteStream(
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    parseAddress(_data: BytesLike, overrides?: CallOverrides): Promise<string>;

    parseBytes32(_data: BytesLike, overrides?: CallOverrides): Promise<string>;

    parseUint(_data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    encodeAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeBytes32(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeUint(
      _uint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ingestByteStream(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseAddress(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseBytes32(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parseUint(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeAddress(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBytes32(
      _bytes: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeUint(
      _uint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ingestByteStream(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseAddress(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseBytes32(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parseUint(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
