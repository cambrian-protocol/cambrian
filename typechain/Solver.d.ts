/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolverInterface extends ethers.utils.Interface {
  functions: {
    "addData(uint8,uint256,bytes)": FunctionFragment;
    "addressFromChainIndex(uint256)": FunctionFragment;
    "arbitrate(uint256[])": FunctionFragment;
    "arbitrateNull()": FunctionFragment;
    "arbitrationPending()": FunctionFragment;
    "arbitrationRequested()": FunctionFragment;
    "chainChild()": FunctionFragment;
    "chainIndex()": FunctionFragment;
    "chainParent()": FunctionFragment;
    "conditions(uint256)": FunctionFragment;
    "config()": FunctionFragment;
    "confirmPayouts()": FunctionFragment;
    "deferredIngest(uint256)": FunctionFragment;
    "deployChild(tuple)": FunctionFragment;
    "executeSolve()": FunctionFragment;
    "getCanonCollectionId(uint256)": FunctionFragment;
    "getConditions()": FunctionFragment;
    "getOutput(uint256)": FunctionFragment;
    "ingestsValid()": FunctionFragment;
    "init(address,uint256,tuple)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "prepareSolve()": FunctionFragment;
    "proposePayouts(uint256[])": FunctionFragment;
    "setTrackingId(bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timelock()": FunctionFragment;
    "trackingId()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addData",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressFromChainIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrateNull",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationRequested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainChild",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainParent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conditions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmPayouts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deferredIngest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployChild",
    values: [
      {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSolve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCanonCollectionId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutput",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ingestsValid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      BigNumberish,
      {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareSolve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposePayouts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrackingId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trackingId",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressFromChainIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitrateNull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationRequested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainChild", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "conditions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deferredIngest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployChild",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCanonCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOutput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ingestsValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareSolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrackingId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trackingId", data: BytesLike): Result;

  events: {};
}

export class Solver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolverInterface;

  functions: {
    addData(
      _type: BigNumberish,
      _key: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressFromChainIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _address: string }>;

    arbitrate(
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrateNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrationPending(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrationRequested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainChild(overrides?: CallOverrides): Promise<[string]>;

    chainIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainParent(overrides?: CallOverrides): Promise<[string]>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number] & {
        collateralToken: string;
        questionId: string;
        parentCollectionId: string;
        conditionId: string;
        status: number;
      }
    >;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          collateralToken: string;
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        }
      ] & {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumber;
        data: string;
        conditionBase: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          collateralToken: string;
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        };
      }
    >;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deferredIngest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployChild(
      _config: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCanonCollectionId(
      _partitionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { collectionId: string }>;

    getConditions(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, string, BigNumber[], number] & {
          collateralToken: string;
          questionId: string;
          parentCollectionId: string;
          conditionId: string;
          payouts: BigNumber[];
          status: number;
        })[]
      ]
    >;

    getOutput(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    ingestsValid(overrides?: CallOverrides): Promise<[boolean]>;

    init(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prepareSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTrackingId(
      _trackingId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    trackingId(overrides?: CallOverrides): Promise<[string]>;
  };

  addData(
    _type: BigNumberish,
    _key: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressFromChainIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  arbitrate(
    payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrateNull(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrationPending(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrationRequested(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainChild(overrides?: CallOverrides): Promise<string>;

  chainIndex(overrides?: CallOverrides): Promise<BigNumber>;

  chainParent(overrides?: CallOverrides): Promise<string>;

  conditions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, number] & {
      collateralToken: string;
      questionId: string;
      parentCollectionId: string;
      conditionId: string;
      status: number;
    }
  >;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      string,
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[][],
        BigNumber[][],
        string
      ] & {
        collateralToken: string;
        outcomeSlots: BigNumber;
        parentCollectionPartitionIndex: BigNumber;
        amount: BigNumber;
        partition: BigNumber[];
        recipientAddressPorts: BigNumber[][];
        recipientAmounts: BigNumber[][];
        metadata: string;
      }
    ] & {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumber;
      data: string;
      conditionBase: [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber[],
        BigNumber[][],
        BigNumber[][],
        string
      ] & {
        collateralToken: string;
        outcomeSlots: BigNumber;
        parentCollectionPartitionIndex: BigNumber;
        amount: BigNumber;
        partition: BigNumber[];
        recipientAddressPorts: BigNumber[][];
        recipientAmounts: BigNumber[][];
        metadata: string;
      };
    }
  >;

  confirmPayouts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deferredIngest(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployChild(
    _config: {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        collateralToken: string;
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSolve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCanonCollectionId(
    _partitionIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getConditions(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, string, BigNumber[], number] & {
      collateralToken: string;
      questionId: string;
      parentCollectionId: string;
      conditionId: string;
      payouts: BigNumber[];
      status: number;
    })[]
  >;

  getOutput(_key: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ingestsValid(overrides?: CallOverrides): Promise<boolean>;

  init(
    _chainParent: string,
    _chainIndex: BigNumberish,
    _solverConfig: {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        collateralToken: string;
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prepareSolve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposePayouts(
    _payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTrackingId(
    _trackingId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<BigNumber>;

  trackingId(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addData(
      _type: BigNumberish,
      _key: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addressFromChainIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    arbitrate(
      payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrateNull(overrides?: CallOverrides): Promise<void>;

    arbitrationPending(overrides?: CallOverrides): Promise<void>;

    arbitrationRequested(overrides?: CallOverrides): Promise<void>;

    chainChild(overrides?: CallOverrides): Promise<string>;

    chainIndex(overrides?: CallOverrides): Promise<BigNumber>;

    chainParent(overrides?: CallOverrides): Promise<string>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, number] & {
        collateralToken: string;
        questionId: string;
        parentCollectionId: string;
        conditionId: string;
        status: number;
      }
    >;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        string,
        [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          collateralToken: string;
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        }
      ] & {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumber;
        data: string;
        conditionBase: [
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          collateralToken: string;
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        };
      }
    >;

    confirmPayouts(overrides?: CallOverrides): Promise<void>;

    deferredIngest(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deployChild(
      _config: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<string>;

    executeSolve(overrides?: CallOverrides): Promise<void>;

    getCanonCollectionId(
      _partitionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getConditions(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, string, BigNumber[], number] & {
        collateralToken: string;
        questionId: string;
        parentCollectionId: string;
        conditionId: string;
        payouts: BigNumber[];
        status: number;
      })[]
    >;

    getOutput(_key: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ingestsValid(overrides?: CallOverrides): Promise<boolean>;

    init(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    prepareSolve(overrides?: CallOverrides): Promise<void>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTrackingId(
      _trackingId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    trackingId(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addData(
      _type: BigNumberish,
      _key: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressFromChainIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    arbitrate(
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrateNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrationPending(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrationRequested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainChild(overrides?: CallOverrides): Promise<BigNumber>;

    chainIndex(overrides?: CallOverrides): Promise<BigNumber>;

    chainParent(overrides?: CallOverrides): Promise<BigNumber>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deferredIngest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployChild(
      _config: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCanonCollectionId(
      _partitionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConditions(overrides?: CallOverrides): Promise<BigNumber>;

    getOutput(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ingestsValid(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prepareSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTrackingId(
      _trackingId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    trackingId(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addData(
      _type: BigNumberish,
      _key: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressFromChainIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbitrate(
      payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrateNull(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrationPending(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrationRequested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainChild(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainParent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conditions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deferredIngest(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployChild(
      _config: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCanonCollectionId(
      _partitionIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConditions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOutput(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ingestsValid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prepareSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTrackingId(
      _trackingId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trackingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
