/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolverInterface extends ethers.utils.Interface {
  functions: {
    "actions(uint256)": FunctionFragment;
    "arbiter()": FunctionFragment;
    "arbitrate(uint256[])": FunctionFragment;
    "arbitrationDelivered()": FunctionFragment;
    "canonCondition()": FunctionFragment;
    "collateralToken()": FunctionFragment;
    "conditionalTokens()": FunctionFragment;
    "confirmPayouts()": FunctionFragment;
    "data()": FunctionFragment;
    "executeCanonCondition(uint256,bytes32,uint256,uint256[],address[][],uint256[][],string)": FunctionFragment;
    "executeSolve()": FunctionFragment;
    "executed()": FunctionFragment;
    "getPayouts()": FunctionFragment;
    "init(address,bytes32,address,address,address,address,uint256,tuple[],bytes)": FunctionFragment;
    "keeper()": FunctionFragment;
    "nullArbitrate()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "pendingArbitration()": FunctionFragment;
    "proposalsHub()": FunctionFragment;
    "proposePayouts(uint256[])": FunctionFragment;
    "solutionId()": FunctionFragment;
    "solutionsHub()": FunctionFragment;
    "solved()": FunctionFragment;
    "timelock()": FunctionFragment;
    "timelockDuration()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "arbiter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "arbitrate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrationDelivered",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canonCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPayouts",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeCanonCondition",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish[],
      string[][],
      BigNumberish[][],
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSolve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPayouts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      string,
      BytesLike,
      string,
      string,
      string,
      string,
      BigNumberish,
      {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nullArbitrate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingArbitration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsHub",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposePayouts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionsHub",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "solved", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockDuration",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbiter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arbitrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arbitrationDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canonCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeCanonCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayouts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nullArbitrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingArbitration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalsHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solutionId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solutionsHub",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockDuration",
    data: BytesLike
  ): Result;

  events: {};
}

export class Solver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolverInterface;

  functions: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber, string] & {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumber;
        value: BigNumber;
        data: string;
      }
    >;

    arbiter(overrides?: CallOverrides): Promise<[string]>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrationDelivered(overrides?: CallOverrides): Promise<[boolean]>;

    canonCondition(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber] & {
        collateralToken: string;
        oracle: string;
        questionId: string;
        outcomeSlots: BigNumber;
        parentCollectionId: string;
        conditionId: string;
        amount: BigNumber;
      }
    >;

    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    conditionalTokens(overrides?: CallOverrides): Promise<[string]>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<[string]>;

    executeCanonCondition(
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _amount: BigNumberish,
      _partition: BigNumberish[],
      _initialRecipientAddresses: string[][],
      _initialRecipientAmounts: BigNumberish[][],
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executed(overrides?: CallOverrides): Promise<[boolean]>;

    getPayouts(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    init(
      _collateralToken: string,
      _solutionId: BytesLike,
      _proposalsHub: string,
      _solutionsHub: string,
      _keeper: string,
      _arbiter: string,
      _timelockHours: BigNumberish,
      _actions: {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingArbitration(overrides?: CallOverrides): Promise<[boolean]>;

    proposalsHub(overrides?: CallOverrides): Promise<[string]>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solutionId(overrides?: CallOverrides): Promise<[string]>;

    solutionsHub(overrides?: CallOverrides): Promise<[string]>;

    solved(overrides?: CallOverrides): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  actions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, BigNumber, BigNumber, string] & {
      to: string;
      executed: boolean;
      useSolverIdx: boolean;
      solverIdx: BigNumber;
      value: BigNumber;
      data: string;
    }
  >;

  arbiter(overrides?: CallOverrides): Promise<string>;

  arbitrate(
    _payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrationDelivered(overrides?: CallOverrides): Promise<boolean>;

  canonCondition(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber] & {
      collateralToken: string;
      oracle: string;
      questionId: string;
      outcomeSlots: BigNumber;
      parentCollectionId: string;
      conditionId: string;
      amount: BigNumber;
    }
  >;

  collateralToken(overrides?: CallOverrides): Promise<string>;

  conditionalTokens(overrides?: CallOverrides): Promise<string>;

  confirmPayouts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<string>;

  executeCanonCondition(
    _outcomeSlots: BigNumberish,
    _parentCollectionId: BytesLike,
    _amount: BigNumberish,
    _partition: BigNumberish[],
    _initialRecipientAddresses: string[][],
    _initialRecipientAmounts: BigNumberish[][],
    _metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSolve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executed(overrides?: CallOverrides): Promise<boolean>;

  getPayouts(overrides?: CallOverrides): Promise<BigNumber[]>;

  init(
    _collateralToken: string,
    _solutionId: BytesLike,
    _proposalsHub: string,
    _solutionsHub: string,
    _keeper: string,
    _arbiter: string,
    _timelockHours: BigNumberish,
    _actions: {
      to: string;
      executed: boolean;
      useSolverIdx: boolean;
      solverIdx: BigNumberish;
      value: BigNumberish;
      data: BytesLike;
    }[],
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  keeper(overrides?: CallOverrides): Promise<string>;

  nullArbitrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingArbitration(overrides?: CallOverrides): Promise<boolean>;

  proposalsHub(overrides?: CallOverrides): Promise<string>;

  proposePayouts(
    _payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solutionId(overrides?: CallOverrides): Promise<string>;

  solutionsHub(overrides?: CallOverrides): Promise<string>;

  solved(overrides?: CallOverrides): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<BigNumber>;

  timelockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, BigNumber, BigNumber, string] & {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumber;
        value: BigNumber;
        data: string;
      }
    >;

    arbiter(overrides?: CallOverrides): Promise<string>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrationDelivered(overrides?: CallOverrides): Promise<boolean>;

    canonCondition(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber] & {
        collateralToken: string;
        oracle: string;
        questionId: string;
        outcomeSlots: BigNumber;
        parentCollectionId: string;
        conditionId: string;
        amount: BigNumber;
      }
    >;

    collateralToken(overrides?: CallOverrides): Promise<string>;

    conditionalTokens(overrides?: CallOverrides): Promise<string>;

    confirmPayouts(overrides?: CallOverrides): Promise<void>;

    data(overrides?: CallOverrides): Promise<string>;

    executeCanonCondition(
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _amount: BigNumberish,
      _partition: BigNumberish[],
      _initialRecipientAddresses: string[][],
      _initialRecipientAmounts: BigNumberish[][],
      _metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeSolve(overrides?: CallOverrides): Promise<void>;

    executed(overrides?: CallOverrides): Promise<boolean>;

    getPayouts(overrides?: CallOverrides): Promise<BigNumber[]>;

    init(
      _collateralToken: string,
      _solutionId: BytesLike,
      _proposalsHub: string,
      _solutionsHub: string,
      _keeper: string,
      _arbiter: string,
      _timelockHours: BigNumberish,
      _actions: {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[],
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    keeper(overrides?: CallOverrides): Promise<string>;

    nullArbitrate(overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingArbitration(overrides?: CallOverrides): Promise<boolean>;

    proposalsHub(overrides?: CallOverrides): Promise<string>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    solutionId(overrides?: CallOverrides): Promise<string>;

    solutionsHub(overrides?: CallOverrides): Promise<string>;

    solved(overrides?: CallOverrides): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    timelockDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    actions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    arbiter(overrides?: CallOverrides): Promise<BigNumber>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrationDelivered(overrides?: CallOverrides): Promise<BigNumber>;

    canonCondition(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    conditionalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    executeCanonCondition(
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _amount: BigNumberish,
      _partition: BigNumberish[],
      _initialRecipientAddresses: string[][],
      _initialRecipientAmounts: BigNumberish[][],
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executed(overrides?: CallOverrides): Promise<BigNumber>;

    getPayouts(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _collateralToken: string,
      _solutionId: BytesLike,
      _proposalsHub: string,
      _solutionsHub: string,
      _keeper: string,
      _arbiter: string,
      _timelockHours: BigNumberish,
      _actions: {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingArbitration(overrides?: CallOverrides): Promise<BigNumber>;

    proposalsHub(overrides?: CallOverrides): Promise<BigNumber>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solutionId(overrides?: CallOverrides): Promise<BigNumber>;

    solutionsHub(overrides?: CallOverrides): Promise<BigNumber>;

    solved(overrides?: CallOverrides): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    timelockDuration(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    arbiter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrationDelivered(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canonCondition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conditionalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeCanonCondition(
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _amount: BigNumberish,
      _partition: BigNumberish[],
      _initialRecipientAddresses: string[][],
      _initialRecipientAmounts: BigNumberish[][],
      _metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayouts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _collateralToken: string,
      _solutionId: BytesLike,
      _proposalsHub: string,
      _solutionsHub: string,
      _keeper: string,
      _arbiter: string,
      _timelockHours: BigNumberish,
      _actions: {
        to: string;
        executed: boolean;
        useSolverIdx: boolean;
        solverIdx: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[],
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingArbitration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalsHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solutionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solutionsHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    solved(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
