/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolverInterface extends ethers.utils.Interface {
  functions: {
    "allocatePartition(bytes32,uint256,bytes32,address,uint256[],uint256[][],address[][])": FunctionFragment;
    "arbitrate(uint256[])": FunctionFragment;
    "conditionalTokens()": FunctionFragment;
    "confirmPayouts()": FunctionFragment;
    "createCondition(bytes32,uint256)": FunctionFragment;
    "initiateSolve()": FunctionFragment;
    "nullArbitrate()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "proposePayouts(uint256[])": FunctionFragment;
    "setApproval(address,bool)": FunctionFragment;
    "splitCondition(bytes32,bytes32,uint256,uint256[],address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocatePartition",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish[],
      BigNumberish[][],
      string[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "arbitrate",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPayouts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCondition",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateSolve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nullArbitrate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePayouts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setApproval",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "splitCondition",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish[],
      string,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocatePartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "arbitrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conditionalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateSolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nullArbitrate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePayouts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitCondition",
    data: BytesLike
  ): Result;

  events: {};
}

export class Solver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolverInterface;

  functions: {
    allocatePartition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _collateralToken: string,
      _partition: BigNumberish[],
      _amounts: BigNumberish[][],
      _addresses: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    conditionalTokens(overrides?: CallOverrides): Promise<[string]>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCondition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApproval(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    splitCondition(
      _questionId: BytesLike,
      _parentCollectionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _partition: BigNumberish[],
      _collateralToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocatePartition(
    _questionId: BytesLike,
    _outcomeSlots: BigNumberish,
    _parentCollectionId: BytesLike,
    _collateralToken: string,
    _partition: BigNumberish[],
    _amounts: BigNumberish[][],
    _addresses: string[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arbitrate(
    _payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  conditionalTokens(overrides?: CallOverrides): Promise<string>;

  confirmPayouts(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCondition(
    _questionId: BytesLike,
    _outcomeSlots: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateSolve(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nullArbitrate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  proposePayouts(
    _payouts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApproval(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitCondition(
    _questionId: BytesLike,
    _parentCollectionId: BytesLike,
    _outcomeSlots: BigNumberish,
    _partition: BigNumberish[],
    _collateralToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocatePartition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _collateralToken: string,
      _partition: BigNumberish[],
      _amounts: BigNumberish[][],
      _addresses: string[][],
      overrides?: CallOverrides
    ): Promise<void>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    conditionalTokens(overrides?: CallOverrides): Promise<string>;

    confirmPayouts(overrides?: CallOverrides): Promise<void>;

    createCondition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initiateSolve(overrides?: CallOverrides): Promise<void>;

    nullArbitrate(overrides?: CallOverrides): Promise<void>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApproval(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    splitCondition(
      _questionId: BytesLike,
      _parentCollectionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _partition: BigNumberish[],
      _collateralToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allocatePartition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _collateralToken: string,
      _partition: BigNumberish[],
      _amounts: BigNumberish[][],
      _addresses: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    conditionalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCondition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApproval(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    splitCondition(
      _questionId: BytesLike,
      _parentCollectionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _partition: BigNumberish[],
      _collateralToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocatePartition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _parentCollectionId: BytesLike,
      _collateralToken: string,
      _partition: BigNumberish[],
      _amounts: BigNumberish[][],
      _addresses: string[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arbitrate(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    conditionalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmPayouts(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCondition(
      _questionId: BytesLike,
      _outcomeSlots: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateSolve(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nullArbitrate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposePayouts(
      _payouts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApproval(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    splitCondition(
      _questionId: BytesLike,
      _parentCollectionId: BytesLike,
      _outcomeSlots: BigNumberish,
      _partition: BigNumberish[],
      _collateralToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
