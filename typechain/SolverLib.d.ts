/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolverLibInterface extends ethers.utils.Interface {
  functions: {
    "addressFromChainIndex(uint256,address,address,address,uint256)": FunctionFragment;
    "getCanonCollectionId(tuple,uint256)": FunctionFragment;
    "getPositionId(tuple,IERC20,uint256)": FunctionFragment;
    "ingestsValid(tuple[],uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressFromChainIndex",
    values: [BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCanonCollectionId",
    values: [
      {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionId",
    values: [
      {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ingestsValid",
    values: [
      {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressFromChainIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCanonCollectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ingestsValid",
    data: BytesLike
  ): Result;

  events: {};
}

export class SolverLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolverLibInterface;

  functions: {
    addressFromChainIndex(
      index: BigNumberish,
      _this: string,
      chainParent: string,
      chainChild: string,
      chainIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _address: string }>;

    getCanonCollectionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { collectionId: string }>;

    getPositionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      collateralToken: string,
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { positionId: BigNumber }>;

    ingestsValid(
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[],
      conditionVer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addressFromChainIndex(
    index: BigNumberish,
    _this: string,
    chainParent: string,
    chainChild: string,
    chainIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCanonCollectionId(
    condition: {
      collateralToken: string;
      questionId: BytesLike;
      parentCollectionId: BytesLike;
      conditionId: BytesLike;
      payouts: BigNumberish[];
      status: BigNumberish;
    },
    partition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getPositionId(
    condition: {
      collateralToken: string;
      questionId: BytesLike;
      parentCollectionId: BytesLike;
      conditionId: BytesLike;
      payouts: BigNumberish[];
      status: BigNumberish;
    },
    collateralToken: string,
    partition: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ingestsValid(
    ingests: {
      executions: BigNumberish;
      isDeferred: boolean;
      isConstant: boolean;
      port: BigNumberish;
      key: BigNumberish;
      solverIndex: BigNumberish;
      data: BytesLike;
    }[],
    conditionVer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addressFromChainIndex(
      index: BigNumberish,
      _this: string,
      chainParent: string,
      chainChild: string,
      chainIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCanonCollectionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getPositionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      collateralToken: string,
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ingestsValid(
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[],
      conditionVer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addressFromChainIndex(
      index: BigNumberish,
      _this: string,
      chainParent: string,
      chainChild: string,
      chainIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCanonCollectionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      collateralToken: string,
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ingestsValid(
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[],
      conditionVer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressFromChainIndex(
      index: BigNumberish,
      _this: string,
      chainParent: string,
      chainChild: string,
      chainIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCanonCollectionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionId(
      condition: {
        collateralToken: string;
        questionId: BytesLike;
        parentCollectionId: BytesLike;
        conditionId: BytesLike;
        payouts: BigNumberish[];
        status: BigNumberish;
      },
      collateralToken: string,
      partition: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ingestsValid(
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[],
      conditionVer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
