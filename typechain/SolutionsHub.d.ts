/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolutionsHubInterface extends ethers.utils.Interface {
  functions: {
    "childSolver(bytes32)": FunctionFragment;
    "conditionalTokens()": FunctionFragment;
    "createSolution(bytes32,address,tuple[])": FunctionFragment;
    "executeSolution(bytes32,bytes32)": FunctionFragment;
    "getSolution(bytes32)": FunctionFragment;
    "linkToProposal(bytes32,bytes32)": FunctionFragment;
    "parentSolver(bytes32)": FunctionFragment;
    "setSolverConfigs(bytes32,tuple[])": FunctionFragment;
    "solverFromIndex(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "childSolver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "conditionalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSolution",
    values: [
      BytesLike,
      string,
      {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSolution",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSolution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkToProposal",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "parentSolver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolverConfigs",
    values: [
      BytesLike,
      {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "solverFromIndex",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "childSolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conditionalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parentSolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolverConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solverFromIndex",
    data: BytesLike
  ): Result;

  events: {
    "CreateSolution(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateSolution"): EventFragment;
}

export class SolutionsHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolutionsHubInterface;

  functions: {
    childSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { solver: string }>;

    conditionalTokens(overrides?: CallOverrides): Promise<[string]>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getSolution(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          boolean,
          string,
          string,
          string,
          string,
          string,
          ([
            string,
            string,
            string,
            BigNumber,
            string,
            ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[],
            ([boolean, boolean, string, BigNumber, BigNumber, string] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[],
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            }
          ] & {
            factory: string;
            keeper: string;
            arbiter: string;
            timelockSeconds: BigNumber;
            data: string;
            ingests: ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[];
            actions: ([
              boolean,
              boolean,
              string,
              BigNumber,
              BigNumber,
              string
            ] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[];
            conditionBase: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            };
          })[],
          string[]
        ] & {
          executed: boolean;
          collateralToken: string;
          keeper: string;
          proposalHub: string;
          proposalId: string;
          id: string;
          solverConfigs: ([
            string,
            string,
            string,
            BigNumber,
            string,
            ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[],
            ([boolean, boolean, string, BigNumber, BigNumber, string] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[],
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            }
          ] & {
            factory: string;
            keeper: string;
            arbiter: string;
            timelockSeconds: BigNumber;
            data: string;
            ingests: ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[];
            actions: ([
              boolean,
              boolean,
              string,
              BigNumber,
              BigNumber,
              string
            ] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[];
            conditionBase: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            };
          })[];
          solverAddresses: string[];
        }
      ] & {
        solution: [
          boolean,
          string,
          string,
          string,
          string,
          string,
          ([
            string,
            string,
            string,
            BigNumber,
            string,
            ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[],
            ([boolean, boolean, string, BigNumber, BigNumber, string] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[],
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            }
          ] & {
            factory: string;
            keeper: string;
            arbiter: string;
            timelockSeconds: BigNumber;
            data: string;
            ingests: ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[];
            actions: ([
              boolean,
              boolean,
              string,
              BigNumber,
              BigNumber,
              string
            ] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[];
            conditionBase: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            };
          })[],
          string[]
        ] & {
          executed: boolean;
          collateralToken: string;
          keeper: string;
          proposalHub: string;
          proposalId: string;
          id: string;
          solverConfigs: ([
            string,
            string,
            string,
            BigNumber,
            string,
            ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[],
            ([boolean, boolean, string, BigNumber, BigNumber, string] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[],
            [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            }
          ] & {
            factory: string;
            keeper: string;
            arbiter: string;
            timelockSeconds: BigNumber;
            data: string;
            ingests: ([
              BigNumber,
              boolean,
              boolean,
              number,
              BigNumber,
              BigNumber,
              string
            ] & {
              executions: BigNumber;
              deferred: boolean;
              isConstant: boolean;
              port: number;
              key: BigNumber;
              solverIndex: BigNumber;
              data: string;
            })[];
            actions: ([
              boolean,
              boolean,
              string,
              BigNumber,
              BigNumber,
              string
            ] & {
              executed: boolean;
              isPort: boolean;
              to: string;
              portIndex: BigNumber;
              value: BigNumber;
              data: string;
            })[];
            conditionBase: [
              BigNumber,
              BigNumber,
              BigNumber,
              BigNumber[],
              BigNumber[][],
              BigNumber[][],
              string
            ] & {
              outcomeSlots: BigNumber;
              parentCollectionPartitionIndex: BigNumber;
              amount: BigNumber;
              partition: BigNumber[];
              recipientAddressPorts: BigNumber[][];
              recipientAmounts: BigNumber[][];
              metadata: string;
            };
          })[];
          solverAddresses: string[];
        };
      }
    >;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    parentSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { solver: string }>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { solver: string }>;
  };

  childSolver(
    _solutionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  conditionalTokens(overrides?: CallOverrides): Promise<string>;

  createSolution(
    _id: BytesLike,
    _collateralToken: string,
    _solverConfigs: {
      factory: string;
      keeper: string;
      arbiter: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        deferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSolution(
    _proposalId: BytesLike,
    _solutionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getSolution(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      string,
      string,
      string,
      string,
      string,
      ([
        string,
        string,
        string,
        BigNumber,
        string,
        ([BigNumber, boolean, boolean, number, BigNumber, BigNumber, string] & {
          executions: BigNumber;
          deferred: boolean;
          isConstant: boolean;
          port: number;
          key: BigNumber;
          solverIndex: BigNumber;
          data: string;
        })[],
        ([boolean, boolean, string, BigNumber, BigNumber, string] & {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumber;
          value: BigNumber;
          data: string;
        })[],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        }
      ] & {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumber;
        data: string;
        ingests: ([
          BigNumber,
          boolean,
          boolean,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          executions: BigNumber;
          deferred: boolean;
          isConstant: boolean;
          port: number;
          key: BigNumber;
          solverIndex: BigNumber;
          data: string;
        })[];
        actions: ([boolean, boolean, string, BigNumber, BigNumber, string] & {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumber;
          value: BigNumber;
          data: string;
        })[];
        conditionBase: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        };
      })[],
      string[]
    ] & {
      executed: boolean;
      collateralToken: string;
      keeper: string;
      proposalHub: string;
      proposalId: string;
      id: string;
      solverConfigs: ([
        string,
        string,
        string,
        BigNumber,
        string,
        ([BigNumber, boolean, boolean, number, BigNumber, BigNumber, string] & {
          executions: BigNumber;
          deferred: boolean;
          isConstant: boolean;
          port: number;
          key: BigNumber;
          solverIndex: BigNumber;
          data: string;
        })[],
        ([boolean, boolean, string, BigNumber, BigNumber, string] & {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumber;
          value: BigNumber;
          data: string;
        })[],
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        }
      ] & {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumber;
        data: string;
        ingests: ([
          BigNumber,
          boolean,
          boolean,
          number,
          BigNumber,
          BigNumber,
          string
        ] & {
          executions: BigNumber;
          deferred: boolean;
          isConstant: boolean;
          port: number;
          key: BigNumber;
          solverIndex: BigNumber;
          data: string;
        })[];
        actions: ([boolean, boolean, string, BigNumber, BigNumber, string] & {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumber;
          value: BigNumber;
          data: string;
        })[];
        conditionBase: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber[],
          BigNumber[][],
          BigNumber[][],
          string
        ] & {
          outcomeSlots: BigNumber;
          parentCollectionPartitionIndex: BigNumber;
          amount: BigNumber;
          partition: BigNumber[];
          recipientAddressPorts: BigNumber[][];
          recipientAmounts: BigNumber[][];
          metadata: string;
        };
      })[];
      solverAddresses: string[];
    }
  >;

  linkToProposal(
    _proposalId: BytesLike,
    _solutionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  parentSolver(
    _solutionId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setSolverConfigs(
    _solutionId: BytesLike,
    _solverConfigs: {
      factory: string;
      keeper: string;
      arbiter: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        deferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solverFromIndex(
    _solutionId: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    childSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    conditionalTokens(overrides?: CallOverrides): Promise<string>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getSolution(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        string,
        string,
        string,
        string,
        string,
        ([
          string,
          string,
          string,
          BigNumber,
          string,
          ([
            BigNumber,
            boolean,
            boolean,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            executions: BigNumber;
            deferred: boolean;
            isConstant: boolean;
            port: number;
            key: BigNumber;
            solverIndex: BigNumber;
            data: string;
          })[],
          ([boolean, boolean, string, BigNumber, BigNumber, string] & {
            executed: boolean;
            isPort: boolean;
            to: string;
            portIndex: BigNumber;
            value: BigNumber;
            data: string;
          })[],
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[],
            BigNumber[][],
            BigNumber[][],
            string
          ] & {
            outcomeSlots: BigNumber;
            parentCollectionPartitionIndex: BigNumber;
            amount: BigNumber;
            partition: BigNumber[];
            recipientAddressPorts: BigNumber[][];
            recipientAmounts: BigNumber[][];
            metadata: string;
          }
        ] & {
          factory: string;
          keeper: string;
          arbiter: string;
          timelockSeconds: BigNumber;
          data: string;
          ingests: ([
            BigNumber,
            boolean,
            boolean,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            executions: BigNumber;
            deferred: boolean;
            isConstant: boolean;
            port: number;
            key: BigNumber;
            solverIndex: BigNumber;
            data: string;
          })[];
          actions: ([boolean, boolean, string, BigNumber, BigNumber, string] & {
            executed: boolean;
            isPort: boolean;
            to: string;
            portIndex: BigNumber;
            value: BigNumber;
            data: string;
          })[];
          conditionBase: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[],
            BigNumber[][],
            BigNumber[][],
            string
          ] & {
            outcomeSlots: BigNumber;
            parentCollectionPartitionIndex: BigNumber;
            amount: BigNumber;
            partition: BigNumber[];
            recipientAddressPorts: BigNumber[][];
            recipientAmounts: BigNumber[][];
            metadata: string;
          };
        })[],
        string[]
      ] & {
        executed: boolean;
        collateralToken: string;
        keeper: string;
        proposalHub: string;
        proposalId: string;
        id: string;
        solverConfigs: ([
          string,
          string,
          string,
          BigNumber,
          string,
          ([
            BigNumber,
            boolean,
            boolean,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            executions: BigNumber;
            deferred: boolean;
            isConstant: boolean;
            port: number;
            key: BigNumber;
            solverIndex: BigNumber;
            data: string;
          })[],
          ([boolean, boolean, string, BigNumber, BigNumber, string] & {
            executed: boolean;
            isPort: boolean;
            to: string;
            portIndex: BigNumber;
            value: BigNumber;
            data: string;
          })[],
          [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[],
            BigNumber[][],
            BigNumber[][],
            string
          ] & {
            outcomeSlots: BigNumber;
            parentCollectionPartitionIndex: BigNumber;
            amount: BigNumber;
            partition: BigNumber[];
            recipientAddressPorts: BigNumber[][];
            recipientAmounts: BigNumber[][];
            metadata: string;
          }
        ] & {
          factory: string;
          keeper: string;
          arbiter: string;
          timelockSeconds: BigNumber;
          data: string;
          ingests: ([
            BigNumber,
            boolean,
            boolean,
            number,
            BigNumber,
            BigNumber,
            string
          ] & {
            executions: BigNumber;
            deferred: boolean;
            isConstant: boolean;
            port: number;
            key: BigNumber;
            solverIndex: BigNumber;
            data: string;
          })[];
          actions: ([boolean, boolean, string, BigNumber, BigNumber, string] & {
            executed: boolean;
            isPort: boolean;
            to: string;
            portIndex: BigNumber;
            value: BigNumber;
            data: string;
          })[];
          conditionBase: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber[],
            BigNumber[][],
            BigNumber[][],
            string
          ] & {
            outcomeSlots: BigNumber;
            parentCollectionPartitionIndex: BigNumber;
            amount: BigNumber;
            partition: BigNumber[];
            recipientAddressPorts: BigNumber[][];
            recipientAmounts: BigNumber[][];
            metadata: string;
          };
        })[];
        solverAddresses: string[];
      }
    >;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    parentSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CreateSolution(id?: null): TypedEventFilter<[string], { id: string }>;
  };

  estimateGas: {
    childSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conditionalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getSolution(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    parentSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    childSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conditionalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getSolution(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    parentSolver(
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        factory: string;
        keeper: string;
        arbiter: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          deferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
