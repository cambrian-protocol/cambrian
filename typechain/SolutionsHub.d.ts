/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolutionsHubInterface extends ethers.utils.Interface {
  functions: {
    "conditionalTokens()": FunctionFragment;
    "createSolution(bytes32,address,tuple[])": FunctionFragment;
    "executeSolution(bytes32,bytes32)": FunctionFragment;
    "linkToProposal(bytes32,bytes32)": FunctionFragment;
    "setSolverConfigs(bytes32,tuple[])": FunctionFragment;
    "solverFromIndex(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "conditionalTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSolution",
    values: [
      BytesLike,
      string,
      {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSolution",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkToProposal",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolverConfigs",
    values: [
      BytesLike,
      {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "solverFromIndex",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "conditionalTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolverConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solverFromIndex",
    data: BytesLike
  ): Result;

  events: {
    "CreateSolution(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateSolution"): EventFragment;
}

export class SolutionsHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolutionsHubInterface;

  functions: {
    conditionalTokens(overrides?: CallOverrides): Promise<[string]>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { _address: string }>;
  };

  conditionalTokens(overrides?: CallOverrides): Promise<string>;

  createSolution(
    _id: BytesLike,
    _collateralToken: string,
    _solverConfigs: {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        collateralToken: string;
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSolution(
    _proposalId: BytesLike,
    _solutionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkToProposal(
    _proposalId: BytesLike,
    _solutionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSolverConfigs(
    _solutionId: BytesLike,
    _solverConfigs: {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        port: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      actions: {
        executed: boolean;
        isPort: boolean;
        to: string;
        portIndex: BigNumberish;
        value: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        collateralToken: string;
        outcomeSlots: BigNumberish;
        parentCollectionPartitionIndex: BigNumberish;
        amount: BigNumberish;
        partition: BigNumberish[];
        recipientAddressPorts: BigNumberish[][];
        recipientAmounts: BigNumberish[][];
        metadata: string;
      };
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solverFromIndex(
    _solutionId: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    conditionalTokens(overrides?: CallOverrides): Promise<string>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<string>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CreateSolution(id?: null): TypedEventFilter<[string], { id: string }>;
  };

  estimateGas: {
    conditionalTokens(overrides?: CallOverrides): Promise<BigNumber>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    conditionalTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createSolution(
      _id: BytesLike,
      _collateralToken: string,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSolution(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkToProposal(
      _proposalId: BytesLike,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSolverConfigs(
      _solutionId: BytesLike,
      _solverConfigs: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          port: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        actions: {
          executed: boolean;
          isPort: boolean;
          to: string;
          portIndex: BigNumberish;
          value: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionPartitionIndex: BigNumberish;
          amount: BigNumberish;
          partition: BigNumberish[];
          recipientAddressPorts: BigNumberish[][];
          recipientAmounts: BigNumberish[][];
          metadata: string;
        };
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solverFromIndex(
      _solutionId: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
