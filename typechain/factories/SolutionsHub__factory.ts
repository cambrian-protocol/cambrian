/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SolutionsHub, SolutionsHubInterface } from "../SolutionsHub";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ConditionalTokens",
        name: "_conditionalTokens",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "CreateSolution",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "childSolver",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "conditionalTokens",
    outputs: [
      {
        internalType: "contract ConditionalTokens",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract SolverFactory",
            name: "factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbiter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "deferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct Solver.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct Solver.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "createSolution",
    outputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "executeSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
    ],
    name: "getSolution",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
          {
            internalType: "contract IERC20",
            name: "collateralToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "proposalHub",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "proposalId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "contract SolverFactory",
                name: "factory",
                type: "address",
              },
              {
                internalType: "address",
                name: "keeper",
                type: "address",
              },
              {
                internalType: "address",
                name: "arbiter",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "timelockSeconds",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "executions",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "deferred",
                    type: "bool",
                  },
                  {
                    internalType: "bool",
                    name: "isConstant",
                    type: "bool",
                  },
                  {
                    internalType: "uint8",
                    name: "port",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "key",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "solverIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Solver.Ingest[]",
                name: "ingests",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "bool",
                    name: "executed",
                    type: "bool",
                  },
                  {
                    internalType: "bool",
                    name: "isPort",
                    type: "bool",
                  },
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "portIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Solver.Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "outcomeSlots",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "parentCollectionPartitionIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "amount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256[]",
                    name: "partition",
                    type: "uint256[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "recipientAddressPorts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "recipientAmounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                ],
                internalType: "struct Solver.ConditionBase",
                name: "conditionBase",
                type: "tuple",
              },
            ],
            internalType: "struct Solver.Config[]",
            name: "solverConfigs",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "solverAddresses",
            type: "address[]",
          },
        ],
        internalType: "struct SolutionsHub.Solution",
        name: "solution",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "linkToProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "parentSolver",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract SolverFactory",
            name: "factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbiter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "deferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct Solver.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct Solver.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "setSolverConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "solverFromIndex",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162002bec38038062002bec83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008a565b6000602082840312156200006c578081fd5b81516001600160a01b038116811462000083578182fd5b9392505050565b612b52806200009a6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c806373c587f5116100765780638d823d731161005b5780638d823d7314610127578063d4301a3c1461013a578063ddc02e031461015a576100a3565b806373c587f5146101015780638821756614610114576100a3565b8063191481a0146100a85780635bd9e299146100d15780635f67db1e146100d957806360bbb928146100ec575b600080fd5b6100bb6100b6366004611593565b61017a565b6040516100c89190611c9f565b60405180910390f35b6100bb6101c7565b6100bb6100e7366004611531565b6101d6565b6100ff6100fa366004611593565b6102c6565b005b6100ff61010f366004611593565b61078c565b6100bb610122366004611531565b61085c565b6100ff610135366004611549565b610906565b61014d6101483660046115b4565b6109eb565b6040516100c89190611cb3565b61016d610168366004611531565b610b36565b6040516100c89190611f9b565b60008281526001602052604081206006018054839081106101ab57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b6000546001600160a01b031681565b6000805b6000838152600160208190526040909120600601546101f99190612132565b8110156102bb57600083815260016020526040902060060180548290811061023157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03163314156102a95760008381526001602081905260409091206006019061026d90839061211a565b8154811061028b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691506102c19050565b806102b3816125aa565b9150506101da565b50600090505b919050565b6000818152600160205260409020600201546001600160a01b031633146103085760405162461bcd60e51b81526004016102ff90611f2d565b60405180910390fd5b60008181526001602052604090206003015482146103385760405162461bcd60e51b81526004016102ff90611e3c565b60008181526001602052604090205460ff16156103675760405162461bcd60e51b81526004016102ff90611e05565b60008181526001602081905260408220805460ff191690911790555b6000828152600160205260409020600501548110156105455760008281526001602052604081206005018054839081106103cd57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600e9092029091015485835260019091526040822080546002820154600590920180546001600160a01b03948516965086946326ea6128946101009094048116938a939116913091908a90811061043e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600e02016040518663ffffffff1660e01b815260040161046c959493929190611cd3565b602060405180830381600087803b15801561048657600080fd5b505af115801561049a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104be91906114f2565b90506001600160a01b0381166104e65760405162461bcd60e51b81526004016102ff90611dce565b600084815260016020818152604080842060060180549384018155845281842090920180546001600160a01b039095166001600160a01b031990951685179055928252600290925220839055508061053d816125aa565b915050610383565b5060008181526001602052604081206006018054339263c13784f792869290919061058057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526105cf92916001600160a01b031690600401611cbc565b600060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b5050505060005b6000828152600160205260409020600501548110156106de57600082815260016020526040812060060180548390811061064e57634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f2c17b91e00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921693508392632c17b91e9260048084019382900301818387803b1580156106b257600080fd5b505af11580156106c6573d6000803e3d6000fd5b505050505080806106d6906125aa565b915050610604565b506000818152600160205260408120600601805490919061070f57634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f3a275fa200000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692633a275fa29260048084019382900301818387803b15801561077057600080fd5b505af1158015610784573d6000803e3d6000fd5b505050505050565b6040517fd3f79a05000000000000000000000000000000000000000000000000000000008152339063d3f79a05906107c8908590600401611cb3565b60206040518083038186803b1580156107e057600080fd5b505afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190611515565b6108345760405162461bcd60e51b81526004016102ff90611ed0565b60009081526001602052604090206002810180546001600160a01b0319163317905560030155565b6000805b6000838152600160205260409020600601548110156102bb5760008381526001602052604090206006018054829081106108aa57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03163314156108f457806108d55760009150506102c1565b60008381526001602081905260409091206006019061026d9083612132565b806108fe816125aa565b915050610860565b6000838152600160208190526040909120015483906001600160a01b031633146109425760405162461bcd60e51b81526004016102ff90611f64565b600084815260016020526040812061095f91600590910190611203565b60005b828110156109e457600085815260016020526040902060050184848381811061099b57634e487b7160e01b600052603260045260246000fd5b90506020028101906109ad91906120f9565b8154600181018355600092835260209092209091600e02016109cf8282612874565b505080806109dc906125aa565b915050610962565b5050505050565b600084815260016020526040812060040154851415610a1c5760405162461bcd60e51b81526004016102ff90611e73565b600085815260016020819052604082206004810188905590810180546001600160a01b0319163317905580546001600160a01b038716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909116178155905b83811015610af45781600501858583818110610aab57634e487b7160e01b600052603260045260246000fd5b9050602002810190610abd91906120f9565b8154600181018355600092835260209092209091600e0201610adf8282612874565b50508080610aec906125aa565b915050610a7f565b507faf58c2d61bce90c15ecad6e5142ecbbb0b542b557388df7578e0162b098999a386604051610b249190611cb3565b60405180910390a15093949350505050565b610b3e611227565b600082815260016020818152604080842081516101008082018452825460ff811615158352046001600160a01b0390811682860152948201548516818401526002820154909416606085015260038101546080850152600481015460a08501526005810180548351818602810186019094528084529495919460c08701949192909184015b828210156111925760008481526020908190206040805161010081018252600e860290920180546001600160a01b039081168452600182015481169484019490945260028101549093169082015260038201546060820152600482018054919291608084019190610c339061255c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c5f9061255c565b8015610cac5780601f10610c8157610100808354040283529160200191610cac565b820191906000526020600020905b815481529060010190602001808311610c8f57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610df15760008481526020908190206040805160e0810182526005860290920180548352600181015460ff8082161515958501959095526101008104851615159284019290925262010000909104909216606082015260028201546080820152600382015460a082015260048201805491929160c084019190610d609061255c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8c9061255c565b8015610dd95780601f10610dae57610100808354040283529160200191610dd9565b820191906000526020600020905b815481529060010190602001808311610dbc57829003601f168201915b50505050508152505081526020019060010190610cda565b50505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015610f2d5760008481526020908190206040805160c08101825260048602909201805460ff80821615158552610100820416151594840194909452620100009093046001600160a01b031690820152600182015460608201526002820154608082015260038201805491929160a084019190610e9c9061255c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec89061255c565b8015610f155780601f10610eea57610100808354040283529160200191610f15565b820191906000526020600020905b815481529060010190602001808311610ef857829003601f168201915b50505050508152505081526020019060010190610e1e565b505050508152602001600782016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610fb257602002820191906000526020600020905b815481526020019060010190808311610f9e575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561104c5760008481526020908190208301805460408051828502810185019091528181529283018282801561103857602002820191906000526020600020905b815481526020019060010190808311611024575b505050505081526020019060010190610fe0565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156110e5576000848152602090819020830180546040805182850281018501909152818152928301828280156110d157602002820191906000526020600020905b8154815260200190600101908083116110bd575b505050505081526020019060010190611079565b5050505081526020016006820180546110fd9061255c565b80601f01602080910402602001604051908101604052809291908181526020018280546111299061255c565b80156111765780601f1061114b57610100808354040283529160200191611176565b820191906000526020600020905b81548152906001019060200180831161115957829003601f168201915b5050505050815250508152505081526020019060010190610bc3565b505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156111f357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111d5575b5050505050815250509050919050565b50805460008255600e0290600052602060002090810190611224919061126d565b50565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915290565b808211156113265780546001600160a01b031990811682556001820180548216905560028201805490911690556000600382018190556112b0600483018261132a565b6112be600583016000611366565b6112cc600683016000611387565b6000600783018181556008840182905560098401829055906112f1600a8501826113a8565b6112ff6004830160006113c6565b61130d6005830160006113c6565b61131b60068301600061132a565b505050600e0161126d565b5090565b5080546113369061255c565b6000825580601f106113485750611224565b601f01602090049060005260206000209081019061122491906113e4565b508054600082556005029060005260206000209081019061122491906113f9565b50805460008255600402906000526020600020908101906112249190611438565b508054600082559060005260206000209081019061122491906113e4565b5080546000825590600052602060002090810190611224919061148c565b5b8082111561132657600081556001016113e5565b8082111561132657600080825560018201805462ffffff19169055600282018190556003820181905561142f600483018261132a565b506005016113f9565b808211156113265780547fffffffffffffffffffff0000000000000000000000000000000000000000000016815560006001820181905560028201819055611483600383018261132a565b50600401611438565b808211156113265760006114a082826113a8565b5060010161148c565b60008083601f8401126114ba578182fd5b50813567ffffffffffffffff8111156114d1578182fd5b60208301915083602080830285010111156114eb57600080fd5b9250929050565b600060208284031215611503578081fd5b815161150e81612af9565b9392505050565b600060208284031215611526578081fd5b815161150e81612b0e565b600060208284031215611542578081fd5b5035919050565b60008060006040848603121561155d578182fd5b83359250602084013567ffffffffffffffff81111561157a578283fd5b611586868287016114a9565b9497909650939450505050565b600080604083850312156115a5578182fd5b50508035926020909101359150565b600080600080606085870312156115c9578081fd5b8435935060208501356115db81612af9565b9250604085013567ffffffffffffffff8111156115f6578182fd5b611602878288016114a9565b95989497509550505050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156116535781516001600160a01b03168752958201959082019060010161162e565b509495945050505050565b60008282518085526020808601955080818302840101818601855b848110156116a757601f19868403018952611695838351611a6a565b98840198925090830190600101611679565b5090979650505050505050565b60008282548085526020808601955080818302840101858552818520855b848110156116a757858303601f190189526116ed8383611a99565b988401989250600191820191016116d2565b6000815180845260208085018081965082840281019150828601855b858110156117905782840389528151805115158552858101511515868601526040808201516001600160a01b031690860152606080820151908601526080808201519086015260a09081015160c09186018290529061177c81870183611ad1565b9a87019a955050509084019060010161171b565b5091979650505050505050565b6000815480845260208085018081965082840281019150858552828520855b8581101561179057828403895260c0825460ff808216151587526117e7888801828460081c16611acb565b50611801604087016001600160a01b038360101c1661160e565b5060018301546060860152600283015460808601528060a086015261182b81860160038501611b1c565b99860199945050600491909101906001016117bc565b6000815180845260208085018081965082840281019150828601855b85811015611790578284038952815161010061187a86835161160e565b8682015161188a8888018261160e565b5060408083015161189d8289018261160e565b5050606080830151818801525060808083015182828901526118c183890182611ad1565b9250505060a080830151878303828901526118dc8382611929565b9250505060c080830151878303828901526118f783826116ff565b9250505060e080830151925086820381880152506119158183611b93565b9a87019a955050509084019060010161185d565b6000815180845260208085018081965082840281019150828601855b858110156117905782840389528151805185528581015115158686015260408082015115159086015260608082015160ff16908601526080808201519086015260a0808201519086015260c09081015160e0918601829052906119aa81870183611ad1565b9a87019a9550505090840190600101611945565b6000815480845260208085018081965082840281019150858552828520855b8581101561179057828403895260e082548552600183015460ff611a05888801828416611acb565b611a1760408801828460081c16611acb565b611a2960608801828460101c16611c98565b505060028301546080860152600383015460a08601528060c0860152611a5481860160048501611b1c565b99860199945050600591909101906001016119dd565b6000815180845260208085019450808401835b8381101561165357815187529582019590820190600101611a7d565b6000815480845260208085019450838352808320835b8381101561165357815487529582019560019182019101611aaf565b15159052565b60008151808452815b81811015611af657602081850181015186830182015201611ada565b81811115611b075782602083870101525b50601f01601f19169290920160200192915050565b60008154611b298161255c565b808552602060018381168015611b465760018114611b5a57611b88565b60ff19851688840152604088019550611b88565b866000528260002060005b85811015611b805781548a8201860152908301908401611b65565b890184019650505b505050505092915050565b6000815183526020820151602084015260408201516040840152606082015160e06060850152611bc660e0850182611a6a565b905060808301518482036080860152611bdf828261165e565b91505060a083015184820360a0860152611bf9828261165e565b91505060c083015184820360c0860152611c138282611ad1565b95945050505050565b600081548352600182015460208401526002820154604084015260e06060840152611c4d60e0840160038401611a99565b8381036080850152611c6281600485016116b4565b905083810360a0850152611c7981600585016116b4565b905083810360c0850152611c908160068501611b1c565b949350505050565b60ff169052565b6001600160a01b0391909116815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b60006001600160a01b038088168352866020840152808616604084015280851660608401525060a06080830152611d1660a08301611d118554612149565b61160e565b611d236001840154612149565b611d3060c084018261160e565b50611d3e6002840154612149565b611d4b60e084018261160e565b50600383015461010083810191909152610120830152611d726101a0830160048501611b1c565b609f198084830301610140850152611d8d82600587016119be565b91508084830301610160850152611da7826006870161179d565b9150808483030161018085015250611dc28160078601611c1c565b98975050505050505050565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b60208082526019908201527f536f6c7574696f6e20616c726561647920657865637574656400000000000000604082015260600190565b60208082526010908201527f57726f6e672070726f706f73616c496400000000000000000000000000000000604082015260600190565b60208082526024908201527f536f6c7574696f6e734875623a3a5468697320494420616c726561647920657860408201527f6973747300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f50726f706f73616c206973206e6f742076616c69642061742070726f706f736160408201527f6c48756200000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f4e6f7420636f72726563742070726f706f73616c487562000000000000000000604082015260600190565b60208082526018908201527f536f6c7574696f6e734875623a206f6e6c794b65657065720000000000000000604082015260600190565b6000602082528251151560208301526020830151611fbc604084018261160e565b506040830151611fcf606084018261160e565b506060830151611fe2608084018261160e565b50608083015160a083015260a083015160c083015260c08301516101008060e0850152612013610120850183611841565b915060e0850151601f19858403018286015261202f838261161b565b9695505050505050565b6000808335601e1984360301811261204f578283fd5b83018035915067ffffffffffffffff821115612069578283fd5b60209081019250810236038213156114eb57600080fd5b6000808335601e19843603018112612096578283fd5b83018035915067ffffffffffffffff8211156120b0578283fd5b6020019150368190038213156114eb57600080fd5b6000823560be198336030181126120da578182fd5b9190910192915050565b6000823560de198336030181126120da578182fd5b6000823560fe198336030181126120da578182fd5b60009081526020902090565b6000821982111561212d5761212d6125db565b500190565b600082821015612144576121446125db565b500390565b6001600160a01b031690565b5b8181101561216a5760008155600101612156565b5050565b68010000000000000000831115612187576121876125f1565b8054838255808410156121c5576000828152602081208581019083015b808210156121c1576121b6838361261a565b6001820191506121a4565b5050505b50816121d08261210e565b6000805b86811015612207576121e68487612039565b6121f28183868861296b565b505060209390930192600192830192016121d4565b50505050505050565b68010000000000000000831115612229576122296125f1565b8054838255808410156122d8577f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600181831181161561226b5761226b6125db565b600482871182161561227f5761227f6125db565b600085815260208120909350878202810190828602015b808210156122d2578482556122ae8586868501612ada565b6122bc858660028501612ada565b6122c9856003840161265e565b90820190612296565b50505050505b50816122e38261210e565b6000805b86811015612207576123036122fc85886120c5565b8385612984565b60209390930192600492909201916001016122e7565b68010000000000000000831115612332576123326125f1565b8054838255808410156123ef577f33333333333333333333333333333333333333333333333333333333333333336001818311811615612374576123746125db565b6005828711821615612388576123886125db565b600085815260208120909350878202810190828602015b808210156123e9576123b2858684612ada565b84848301556123c5858660028501612ada565b6123d3858660038501612ada565b6123e0856004840161265e565b9082019061239f565b50505050505b50816123fa8261210e565b6000805b868110156122075761241a61241385886120e4565b8385612a43565b60209390930192600592909201916001016123fe565b61243a838261261a565b818160005260208060002060005b8681101561220757833582559282019260019182019101612448565b67ffffffffffffffff83111561247c5761247c6125f1565b612486815461255c565b600080601f8611601f8411818117156124a5576124a28661210e565b92505b80156124d4576020601f890104830160208910156124c05750825b6124d26020601f880104850182612155565b505b508060018114612500576000945087156124ef578387013594505b6124f98886612597565b8655612552565b601f198816945082845b8681101561252a578886013582556020958601956001909201910161250a565b508886101561254757878501356000196008601f8c16021c191681555b506001600289020186555b5050505050505050565b60028104600182168061257057607f821691505b6020821081141561259157634e487b7160e01b600052602260045260246000fd5b50919050565b600019600883021c191660029091021790565b60006000198214156125be576125be6125db565b5060010190565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561261481612af9565b92915050565b68010000000000000000821115612633576126336125f1565b80548282558083101561265957816000526020600020612657828201858301612155565b505b505050565b811561266c5761266c6125c5565b612676815461255c565b801561265957601f8111600181146126915760008355612657565b6000838152602081206126af6020601f860104820160018301612155565b50838152602081206126c2828254612597565b85555550505050565b6001600160a01b0382166001600160a01b03198254161781555050565b60ff1981541660ff8315151681178255505050565b81358155600160208084013582840155604084013560028401556127246060850185612039565b612732818360038801612430565b50506127416080850185612039565b61274f81836004880161216e565b505061275e60a0850185612039565b61276c81836005880161216e565b50506006830161277f60c0860186612080565b67ffffffffffffffff811115612797576127976125f1565b6127a1835461255c565b600080601f8411601f8411818117156127c0576127bd8861210e565b92505b80156127ec5788601f8701048301898710156127d95750825b6127ea8a601f880104850182612155565b505b50806001811461281857600094508515612807578387013594505b6128118686612597565b8855612866565b601f198616945082845b8681101561283f57888601358255948a0194908b01908a01612822565b508686101561285c57878501356000196008601f8a16021c191681555b5089600287020188555b505050505050505050505050565b813561287f81612af9565b61288981836126cb565b50602082013561289881612af9565b6128a581600184016126cb565b506128be6128b560408401612607565b600283016126cb565b606082013560038201556128d56080830183612080565b6128e3818360048601612464565b50506128f260a0830183612039565b612900818360058601612319565b505061290f60c0830183612039565b61291d818360068601612210565b505061216a61292f60e08401846120e4565b600783016126fd565b805461ff00191691151560081b61ff0016919091179055565b805462ff00008360101b1662ff0000198216178255505050565b8115612979576129796125c5565b612657848483612430565b8115612992576129926125c5565b823561299d81612b0e565b6129a781836126e8565b5060208301356129b681612b0e565b6129c08183612938565b5060408301356129cf81612af9565b81547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1660109190911b75ffffffffffffffffffffffffffffffffffffffff0000161781556060830135600182015560808301356002820155612a3560a0840184612080565b6109e4818360038601612464565b8115612a5157612a516125c5565b82358155600181016020840135612a6781612b0e565b612a7181836126e8565b506040840135612a8081612b0e565b612a8a8183612938565b50606084013560ff81168114612a9f57600080fd5b612aa98183612951565b50506080830135600282015560a08301356003820155612acc60c0840184612080565b6109e4818360048601612464565b805460088302600019811b8086831b1681198416178455505050505050565b6001600160a01b038116811461122457600080fd5b801515811461122457600080fdfea26469706673582212209e02f96db4ebe121662f17795ce5cf38b136143d975e4e4e57813bf26084b80864736f6c63430008000033";

export class SolutionsHub__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _conditionalTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SolutionsHub> {
    return super.deploy(
      _conditionalTokens,
      overrides || {}
    ) as Promise<SolutionsHub>;
  }
  getDeployTransaction(
    _conditionalTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_conditionalTokens, overrides || {});
  }
  attach(address: string): SolutionsHub {
    return super.attach(address) as SolutionsHub;
  }
  connect(signer: Signer): SolutionsHub__factory {
    return super.connect(signer) as SolutionsHub__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolutionsHubInterface {
    return new utils.Interface(_abi) as SolutionsHubInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SolutionsHub {
    return new Contract(address, _abi, signerOrProvider) as SolutionsHub;
  }
}
