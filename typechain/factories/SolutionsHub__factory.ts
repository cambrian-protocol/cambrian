/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SolutionsHub, SolutionsHubInterface } from "../SolutionsHub";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "CreateSolution",
    type: "event",
  },
  {
    inputs: [],
    name: "conditionalTokens",
    outputs: [
      {
        internalType: "contract ConditionalTokens",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract Solver",
            name: "implementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbitrator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isDeferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct SolverLib.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct SolverLib.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "collateralToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct SolverLib.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct SolverLib.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "createSolution",
    outputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "executeSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "linkToProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract Solver",
            name: "implementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbitrator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isDeferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct SolverLib.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct SolverLib.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "collateralToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct SolverLib.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct SolverLib.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "setSolverConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "solverFromIndex",
    outputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040527f5fbdb2315678afecb367f032d93f642f64180aa300000000000000000000000060805234801561003457600080fd5b5060805160601c611edb61005360003960006101520152611edb6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c806373c587f51161005057806373c587f5146100bd578063a5e9b912146100d0578063b585e394146100e357610072565b8063191481a0146100775780635bd9e299146100a057806360bbb928146100a8575b600080fd5b61008a610085366004610d9f565b610103565b60405161009791906111d2565b60405180910390f35b61008a610150565b6100bb6100b6366004610d9f565b610174565b005b6100bb6100cb366004610d9f565b61054c565b6100bb6100de366004610d55565b61061c565b6100f66100f1366004610dc0565b610700565b6040516100979190611217565b600082815260208190526040812060060180548390811061013457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818152602081905260409020600201546001600160a01b031633146101b65760405162461bcd60e51b81526004016101ad9061135f565b60405180910390fd5b60008181526020819052604090206003015482146101e65760405162461bcd60e51b81526004016101ad9061126e565b60008181526020819052604090205460ff16156102155760405162461bcd60e51b81526004016101ad90611237565b6000818152602081905260409020805460ff191660011790556102378161084a565b336001600160a01b0316631918063f8360008085815260200190815260200160002060060160008154811061027c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526102cb92916001600160a01b031690600401611220565b600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b5050505060005b6000828152602081905260409020600501548110156103f657600082815260208190526040812060060180548390811061034a57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154858352908290526040918290206003015491517f0d06101a0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911692508291630d06101a916103b09190600401611217565b600060405180830381600087803b1580156103ca57600080fd5b505af11580156103de573d6000803e3d6000fd5b505050505080806103ee90611922565b915050610300565b506000818152602081905260408120600601805490919061042757634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f2c17b91e00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692632c17b91e9260048084019382900301818387803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b505050600082815260208190526040812060060180549092506104cf57634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f3a275fa200000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692633a275fa29260048084019382900301818387803b15801561053057600080fd5b505af1158015610544573d6000803e3d6000fd5b505050505050565b6040517fd3f79a05000000000000000000000000000000000000000000000000000000008152339063d3f79a0590610588908590600401611217565b60206040518083038186803b1580156105a057600080fd5b505afa1580156105b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d89190610d39565b6105f45760405162461bcd60e51b81526004016101ad90611302565b60009081526020819052604090206002810180546001600160a01b0319163317905560030155565b60008381526020819052604090206001015483906001600160a01b031633146106575760405162461bcd60e51b81526004016101ad90611396565b600084815260208190526040812061067491600590910190610a5c565b60005b828110156106f95760008581526020819052604090206005018484838181106106b057634e487b7160e01b600052603260045260246000fd5b90506020028101906106c2919061148b565b8154600181018355600092835260209092209091600f02016106e48282611bfd565b505080806106f190611922565b915050610677565b5050505050565b6000848152602081905260408120600401548514156107315760405162461bcd60e51b81526004016101ad906112a5565b6000858152602081905260408120600481018790556001810180546001600160a01b0319163317905580546001600160a01b038716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909116178155905b8381101561080857816005018585838181106107bf57634e487b7160e01b600052603260045260246000fd5b90506020028101906107d1919061148b565b8154600181018355600092835260209092209091600f02016107f38282611bfd565b5050808061080090611922565b915050610793565b507faf58c2d61bce90c15ecad6e5142ecbbb0b542b557388df7578e0162b098999a3866040516108389190611217565b60405180910390a15093949350505050565b6000805b600083815260208190526040902060050154811015610a57578061094b5773e7f1725e7734ce288f8367e1bb143e90bb3f05126001600160a01b031663a4bc29c860008360008088815260200190815260200160002060050185815481106108c657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600f02016040518463ffffffff1660e01b81526004016108f2939291906111e6565b602060405180830381600087803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109449190610d16565b9150610a0d565b816001600160a01b0316636980c22b600080868152602001908152602001600020600501838154811061098e57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600f02016040518263ffffffff1660e01b81526004016109b891906113cd565b602060405180830381600087803b1580156109d257600080fd5b505af11580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a9190610d16565b91505b6000838152602081815260408220600601805460018101825590835291200180546001600160a01b0319166001600160a01b03841617905580610a4f81611922565b91505061084e565b505050565b50805460008255600f0290600052602060002090810190610a7d9190610a80565b50565b80821115610b4a5780546001600160a01b03199081168255600182018054821690556002820180549091169055600060038201819055610ac36004830182610b4e565b610ad1600583016000610b8a565b610adf600683016000610bab565b6007820180546001600160a01b031916815560006008840181905560098401819055600a8401819055610b15600b850182610bcc565b610b23600583016000610bea565b610b31600683016000610bea565b610b3f600783016000610b4e565b505050600f01610a80565b5090565b508054610b5a906118d4565b6000825580601f10610b6c5750610a7d565b601f016020900490600052602060002090810190610a7d9190610c08565b5080546000825560050290600052602060002090810190610a7d9190610c1d565b5080546000825560040290600052602060002090810190610a7d9190610c5c565b5080546000825590600052602060002090810190610a7d9190610c08565b5080546000825590600052602060002090810190610a7d9190610cb0565b5b80821115610b4a5760008155600101610c09565b80821115610b4a57600080825560018201805462ffffff191690556002820181905560038201819055610c536004830182610b4e565b50600501610c1d565b80821115610b4a5780547fffffffffffffffffffff0000000000000000000000000000000000000000000016815560006001820181905560028201819055610ca76003830182610b4e565b50600401610c5c565b80821115610b4a576000610cc48282610bcc565b50600101610cb0565b60008083601f840112610cde578182fd5b50813567ffffffffffffffff811115610cf5578182fd5b6020830191508360208083028501011115610d0f57600080fd5b9250929050565b600060208284031215610d27578081fd5b8151610d3281611e82565b9392505050565b600060208284031215610d4a578081fd5b8151610d3281611e97565b600080600060408486031215610d69578182fd5b83359250602084013567ffffffffffffffff811115610d86578283fd5b610d9286828701610ccd565b9497909650939450505050565b60008060408385031215610db1578182fd5b50508035926020909101359150565b60008060008060608587031215610dd5578081fd5b843593506020850135610de781611e82565b9250604085013567ffffffffffffffff811115610e02578182fd5b610e0e87828801610ccd565b95989497509550505050565b6001600160a01b03169052565b6000815480845260208085018081965082840281019150858552828520855b85811015610e6f578284038952610e5d8483610fcc565b98850198935060019182019101610e46565b5091979650505050505050565b6000815480845260208085018081965082840281019150858552828520855b85811015610e6f57828403895260c0825460ff80821615158752610ec6888801828460081c16611009565b50610ee0604087016001600160a01b038360101c16610e1a565b5060018301546060860152600283015460808601528060a0860152610f0a8186016003850161100f565b9986019994505060049190910190600101610e9b565b6000815480845260208085018081965082840281019150858552828520855b85811015610e6f57828403895260e082548552600183015460ff610f67888801828416611009565b610f7960408801828460081c16611009565b610f8b60608801828460101c166111cb565b505060028301546080860152600383015460a08601528060c0860152610fb68186016004850161100f565b9986019994505060059190910190600101610f3f565b6000815480845260208085019450838352808320835b83811015610ffe57815487529582019560019182019101610fe2565b509495945050505050565b15159052565b6000815461101c816118d4565b808552602060018381168015611039576001811461104d5761107b565b60ff1985168884015260408801955061107b565b866000528260002060005b858110156110735781548a8201860152908301908401611058565b890184019650505b505050505092915050565b600061010061109e8461109985546114c1565b610e1a565b6001830154602085015260028301546040850152600383015460608501528060808501526110d181850160048501610fcc565b905083810360a08501526110e88160058501610e27565b905083810360c08501526110ff8160068501610e27565b905083810360e0850152611116816007850161100f565b949350505050565b60006101006111318461109985546114c1565b61113e60018401546114c1565b61114b6020860182610e1a565b5061115960028401546114c1565b6111666040860182610e1a565b50600383015460608501528060808501526111868185016004850161100f565b905083810360a085015261119d8160058501610f20565b905083810360c08501526111b48160068501610e7c565b905083810360e08501526111168160078501611086565b60ff169052565b6001600160a01b0391909116815260200190565b60006001600160a01b03851682528360208301526060604083015261120e606083018461111e565b95945050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b60208082526019908201527f536f6c7574696f6e20616c726561647920657865637574656400000000000000604082015260600190565b60208082526010908201527f57726f6e672070726f706f73616c496400000000000000000000000000000000604082015260600190565b60208082526024908201527f536f6c7574696f6e734875623a3a5468697320494420616c726561647920657860408201527f6973747300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f50726f706f73616c206973206e6f742076616c69642061742070726f706f736160408201527f6c48756200000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f4e6f7420636f72726563742070726f706f73616c487562000000000000000000604082015260600190565b60208082526018908201527f536f6c7574696f6e734875623a206f6e6c794b65657065720000000000000000604082015260600190565b600060208252610d32602083018461111e565b6000808335601e198436030181126113f6578283fd5b83018035915067ffffffffffffffff821115611410578283fd5b6020908101925081023603821315610d0f57600080fd5b6000808335601e1984360301811261143d578182fd5b83018035915067ffffffffffffffff821115611457578283fd5b602001915036819003821315610d0f57600080fd5b6000823560be19833603018112611481578182fd5b9190910192915050565b6000823560fe19833603018112611481578182fd5b6000823560de19833603018112611481578182fd5b60009081526020902090565b6001600160a01b031690565b5b818110156114e257600081556001016114ce565b5050565b680100000000000000008311156114ff576114ff611969565b80548382558084101561153d576000828152602081208581019083015b808210156115395761152e8383611992565b60018201915061151c565b5050505b5081611548826114b5565b6000805b8681101561157f5761155e84876113e0565b61156a81838688611cf4565b5050602093909301926001928301920161154c565b50505050505050565b680100000000000000008311156115a1576115a1611969565b805483825580841015611650577f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60018183118116156115e3576115e3611953565b60048287118216156115f7576115f7611953565b600085815260208120909350878202810190828602015b8082101561164a578482556116268586868501611e63565b611634858660028501611e63565b61164185600384016119d5565b9082019061160e565b50505050505b508161165b826114b5565b6000805b8681101561157f5761167b611674858861146c565b8385611d0d565b602093909301926004929092019160010161165f565b680100000000000000008311156116aa576116aa611969565b805483825580841015611767577f333333333333333333333333333333333333333333333333333333333333333360018183118116156116ec576116ec611953565b600582871182161561170057611700611953565b600085815260208120909350878202810190828602015b808210156117615761172a858684611e63565b848483015561173d858660028501611e63565b61174b858660038501611e63565b61175885600484016119d5565b90820190611717565b50505050505b5081611772826114b5565b6000805b8681101561157f5761179261178b85886114a0565b8385611dcc565b6020939093019260059290920191600101611776565b6117b28382611992565b818160005260208060002060005b8681101561157f578335825592820192600191820191016117c0565b67ffffffffffffffff8311156117f4576117f4611969565b6117fe81546118d4565b600080601f8611601f84118181171561181d5761181a866114b5565b92505b801561184c576020601f890104830160208910156118385750825b61184a6020601f8801048501826114cd565b505b50806001811461187857600094508715611867578387013594505b611871888661190f565b86556118ca565b601f198816945082845b868110156118a25788860135825560209586019560019092019101611882565b50888610156118bf57878501356000196008601f8c16021c191681555b506001600289020186555b5050505050505050565b6002810460018216806118e857607f821691505b6020821081141561190957634e487b7160e01b600052602260045260246000fd5b50919050565b600019600883021c191660029091021790565b600060001982141561193657611936611953565b5060010190565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561198c81611e82565b92915050565b680100000000000000008211156119ab576119ab611969565b805482825580831015610a57578160005260206000206119cf8282018583016114cd565b50505050565b81156119e3576119e361193d565b6119ed81546118d4565b8015610a5757601f811160018114611a0857600083556119cf565b600083815260208120611a266020601f8601048201600183016114cd565b50838152602081208185555550505050565b6001600160a01b0382166001600160a01b03198254161781555050565b60ff1981541660ff8315151681178255505050565b8135611a7581611e82565b611a7f8183611a38565b506001602080840135828401556040840135600284015560608401356003840155611aad60808501856113e0565b611abb8183600488016117a8565b5050611aca60a08501856113e0565b611ad88183600588016114e6565b5050611ae760c08501856113e0565b611af58183600688016114e6565b505060078301611b0860e0860186611427565b67ffffffffffffffff811115611b2057611b20611969565b611b2a83546118d4565b600080601f8411601f841181811715611b4957611b46886114b5565b92505b8015611b755788601f870104830189871015611b625750825b611b738a601f8801048501826114cd565b505b508060018114611ba157600094508515611b90578387013594505b611b9a868661190f565b8855611bef565b601f198616945082845b86811015611bc857888601358255948a0194908b01908a01611bab565b5086861015611be557878501356000196008601f8a16021c191681555b5089600287020188555b505050505050505050505050565b8135611c0881611e82565b611c128183611a38565b506020820135611c2181611e82565b611c2e8160018401611a38565b50611c47611c3e6040840161197f565b60028301611a38565b60608201356003820155611c5e6080830183611427565b611c6c8183600486016117dc565b5050611c7b60a08301836113e0565b611c89818360058601611691565b5050611c9860c08301836113e0565b611ca6818360068601611588565b50506114e2611cb860e084018461148b565b60078301611a6a565b805461ff00191691151560081b61ff0016919091179055565b805462ff00008360101b1662ff0000198216178255505050565b8115611d0257611d0261193d565b6119cf8484836117a8565b8115611d1b57611d1b61193d565b8235611d2681611e97565b611d308183611a55565b506020830135611d3f81611e97565b611d498183611cc1565b506040830135611d5881611e82565b81547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1660109190911b75ffffffffffffffffffffffffffffffffffffffff0000161781556060830135600182015560808301356002820155611dbe60a0840184611427565b6106f98183600386016117dc565b8115611dda57611dda61193d565b82358155600181016020840135611df081611e97565b611dfa8183611a55565b506040840135611e0981611e97565b611e138183611cc1565b50606084013560ff81168114611e2857600080fd5b611e328183611cda565b50506080830135600282015560a08301356003820155611e5560c0840184611427565b6106f98183600486016117dc565b805460088302600019811b8086831b1681198416178455505050505050565b6001600160a01b0381168114610a7d57600080fd5b8015158114610a7d57600080fdfea26469706673582212202226d3d6d26b379946c39f1e09b55f69ee1b38ee94768e9fa1b039993e9d32e364736f6c63430008000033";

export class SolutionsHub__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SolutionsHub> {
    return super.deploy(overrides || {}) as Promise<SolutionsHub>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SolutionsHub {
    return super.attach(address) as SolutionsHub;
  }
  connect(signer: Signer): SolutionsHub__factory {
    return super.connect(signer) as SolutionsHub__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolutionsHubInterface {
    return new utils.Interface(_abi) as SolutionsHubInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SolutionsHub {
    return new Contract(address, _abi, signerOrProvider) as SolutionsHub;
  }
}
