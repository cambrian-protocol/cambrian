/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SolutionsHub, SolutionsHubInterface } from "../SolutionsHub";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ConditionalTokens",
        name: "_conditionalTokens",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "CreateSolution",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "childSolver",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "conditionalTokens",
    outputs: [
      {
        internalType: "contract ConditionalTokens",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
      {
        internalType: "contract IERC20",
        name: "_collateralToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract SolverFactory",
            name: "factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbiter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isDeferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct Solver.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct Solver.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "createSolution",
    outputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "executeSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
    ],
    name: "getSolution",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
          {
            internalType: "contract IERC20",
            name: "collateralToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "proposalHub",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "proposalId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "contract SolverFactory",
                name: "factory",
                type: "address",
              },
              {
                internalType: "address",
                name: "keeper",
                type: "address",
              },
              {
                internalType: "address",
                name: "arbiter",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "timelockSeconds",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "executions",
                    type: "uint256",
                  },
                  {
                    internalType: "bool",
                    name: "isDeferred",
                    type: "bool",
                  },
                  {
                    internalType: "bool",
                    name: "isConstant",
                    type: "bool",
                  },
                  {
                    internalType: "uint8",
                    name: "port",
                    type: "uint8",
                  },
                  {
                    internalType: "uint256",
                    name: "key",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "solverIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Solver.Ingest[]",
                name: "ingests",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "bool",
                    name: "executed",
                    type: "bool",
                  },
                  {
                    internalType: "bool",
                    name: "isPort",
                    type: "bool",
                  },
                  {
                    internalType: "address",
                    name: "to",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "portIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "bytes",
                    name: "data",
                    type: "bytes",
                  },
                ],
                internalType: "struct Solver.Action[]",
                name: "actions",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "uint256",
                    name: "outcomeSlots",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "parentCollectionPartitionIndex",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "amount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256[]",
                    name: "partition",
                    type: "uint256[]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "recipientAddressPorts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "uint256[][]",
                    name: "recipientAmounts",
                    type: "uint256[][]",
                  },
                  {
                    internalType: "string",
                    name: "metadata",
                    type: "string",
                  },
                ],
                internalType: "struct Solver.ConditionBase",
                name: "conditionBase",
                type: "tuple",
              },
            ],
            internalType: "struct Solver.Config[]",
            name: "solverConfigs",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "solverAddresses",
            type: "address[]",
          },
        ],
        internalType: "struct SolutionsHub.Solution",
        name: "solution",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_id",
        type: "bytes32",
      },
    ],
    name: "getSolutionSolverAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "_addresses",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_proposalId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "linkToProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
    ],
    name: "parentSolver",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "contract SolverFactory",
            name: "factory",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbiter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isDeferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "port",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "executed",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPort",
                type: "bool",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "portIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct Solver.Action[]",
            name: "actions",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAddressPorts",
                type: "uint256[][]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmounts",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "metadata",
                type: "string",
              },
            ],
            internalType: "struct Solver.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct Solver.Config[]",
        name: "_solverConfigs",
        type: "tuple[]",
      },
    ],
    name: "setSolverConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_solutionId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "solverFromIndex",
    outputs: [
      {
        internalType: "address",
        name: "solver",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162002cdf38038062002cdf83398101604081905262000034916200005a565b600080546001600160a01b0319166001600160a01b03929092169190911790556200008a565b6000602082840312156200006c578081fd5b81516001600160a01b038116811462000083578182fd5b9392505050565b612c45806200009a6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806373c587f5116100765780638d823d731161005b5780638d823d7314610162578063d4301a3c14610175578063ddc02e0314610195576100be565b806373c587f51461013c578063882175661461014f576100be565b80635bd9e299116100a75780635bd9e2991461010c5780635f67db1e1461011457806360bbb92814610127576100be565b8063191481a0146100c3578063237f27f0146100ec575b600080fd5b6100d66100d136600461163c565b6101b5565b6040516100e39190611d45565b60405180910390f35b6100ff6100fa3660046115da565b610202565b6040516100e39190611d59565b6100d6610272565b6100d66101223660046115da565b610281565b61013a61013536600461163c565b61036f565b005b61013a61014a36600461163c565b610835565b6100d661015d3660046115da565b610905565b61013a6101703660046115f2565b6109af565b61018861018336600461165d565b610a94565b6040516100e39190611da6565b6101a86101a33660046115da565b610bdf565b6040516100e3919061208e565b60008281526001602052604081206006018054839081106101e657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b60008181526001602090815260409182902060060180548351818402810184019094528084526060939283018282801561026557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610247575b505050505090505b919050565b6000546001600160a01b031681565b6000805b6000838152600160208190526040909120600601546102a49190612225565b8110156103665760008381526001602052604090206006018054829081106102dc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03163314156103545760008381526001602081905260409091206006019061031890839061220d565b8154811061033657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316915061026d9050565b8061035e8161269d565b915050610285565b50600092915050565b6000818152600160205260409020600201546001600160a01b031633146103b15760405162461bcd60e51b81526004016103a890612020565b60405180910390fd5b60008181526001602052604090206003015482146103e15760405162461bcd60e51b81526004016103a890611f2f565b60008181526001602052604090205460ff16156104105760405162461bcd60e51b81526004016103a890611ef8565b60008181526001602081905260408220805460ff191690911790555b6000828152600160205260409020600501548110156105ee57600082815260016020526040812060050180548390811061047657634e487b7160e01b600052603260045260246000fd5b60009182526020808320600e9092029091015485835260019091526040822080546002820154600590920180546001600160a01b03948516965086946326ea6128946101009094048116938a939116913091908a9081106104e757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600e02016040518663ffffffff1660e01b8152600401610515959493929190611dc6565b602060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610567919061159b565b90506001600160a01b03811661058f5760405162461bcd60e51b81526004016103a890611ec1565b600084815260016020818152604080842060060180549384018155845281842090920180546001600160a01b039095166001600160a01b03199095168517905592825260029092522083905550806105e68161269d565b91505061042c565b5060008181526001602052604081206006018054339263c13784f792869290919061062957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261067892916001600160a01b031690600401611daf565b600060405180830381600087803b15801561069257600080fd5b505af11580156106a6573d6000803e3d6000fd5b5050505060005b6000828152600160205260409020600501548110156107875760008281526001602052604081206006018054839081106106f757634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f2c17b91e00000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921693508392632c17b91e9260048084019382900301818387803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b5050505050808061077f9061269d565b9150506106ad565b50600081815260016020526040812060060180549091906107b857634e487b7160e01b600052603260045260246000fd5b6000918252602082200154604080517f3a275fa200000000000000000000000000000000000000000000000000000000815290516001600160a01b0390921692633a275fa29260048084019382900301818387803b15801561081957600080fd5b505af115801561082d573d6000803e3d6000fd5b505050505050565b6040517fd3f79a05000000000000000000000000000000000000000000000000000000008152339063d3f79a0590610871908590600401611da6565b60206040518083038186803b15801561088957600080fd5b505afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c191906115be565b6108dd5760405162461bcd60e51b81526004016103a890611fc3565b60009081526001602052604090206002810180546001600160a01b0319163317905560030155565b6000805b60008381526001602052604090206006015481101561036657600083815260016020526040902060060180548290811061095357634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031633141561099d578061097e57600091505061026d565b6000838152600160208190526040909120600601906103189083612225565b806109a78161269d565b915050610909565b6000838152600160208190526040909120015483906001600160a01b031633146109eb5760405162461bcd60e51b81526004016103a890612057565b6000848152600160205260408120610a08916005909101906112ac565b60005b82811015610a8d576000858152600160205260409020600501848483818110610a4457634e487b7160e01b600052603260045260246000fd5b9050602002810190610a5691906121ec565b8154600181018355600092835260209092209091600e0201610a788282612967565b50508080610a859061269d565b915050610a0b565b5050505050565b600084815260016020526040812060040154851415610ac55760405162461bcd60e51b81526004016103a890611f66565b600085815260016020819052604082206004810188905590810180546001600160a01b0319163317905580546001600160a01b038716610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909116178155905b83811015610b9d5781600501858583818110610b5457634e487b7160e01b600052603260045260246000fd5b9050602002810190610b6691906121ec565b8154600181018355600092835260209092209091600e0201610b888282612967565b50508080610b959061269d565b915050610b28565b507faf58c2d61bce90c15ecad6e5142ecbbb0b542b557388df7578e0162b098999a386604051610bcd9190611da6565b60405180910390a15093949350505050565b610be76112d0565b600082815260016020818152604080842081516101008082018452825460ff811615158352046001600160a01b0390811682860152948201548516818401526002820154909416606085015260038101546080850152600481015460a08501526005810180548351818602810186019094528084529495919460c08701949192909184015b8282101561123b5760008481526020908190206040805161010081018252600e860290920180546001600160a01b039081168452600182015481169484019490945260028101549093169082015260038201546060820152600482018054919291608084019190610cdc9061264f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d089061264f565b8015610d555780601f10610d2a57610100808354040283529160200191610d55565b820191906000526020600020905b815481529060010190602001808311610d3857829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b82821015610e9a5760008481526020908190206040805160e0810182526005860290920180548352600181015460ff8082161515958501959095526101008104851615159284019290925262010000909104909216606082015260028201546080820152600382015460a082015260048201805491929160c084019190610e099061264f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e359061264f565b8015610e825780601f10610e5757610100808354040283529160200191610e82565b820191906000526020600020905b815481529060010190602001808311610e6557829003601f168201915b50505050508152505081526020019060010190610d83565b50505050815260200160068201805480602002602001604051908101604052809291908181526020016000905b82821015610fd65760008481526020908190206040805160c08101825260048602909201805460ff80821615158552610100820416151594840194909452620100009093046001600160a01b031690820152600182015460608201526002820154608082015260038201805491929160a084019190610f459061264f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f719061264f565b8015610fbe5780601f10610f9357610100808354040283529160200191610fbe565b820191906000526020600020905b815481529060010190602001808311610fa157829003601f168201915b50505050508152505081526020019060010190610ec7565b505050508152602001600782016040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561105b57602002820191906000526020600020905b815481526020019060010190808311611047575b5050505050815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156110f5576000848152602090819020830180546040805182850281018501909152818152928301828280156110e157602002820191906000526020600020905b8154815260200190600101908083116110cd575b505050505081526020019060010190611089565b50505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b8282101561118e5760008481526020908190208301805460408051828502810185019091528181529283018282801561117a57602002820191906000526020600020905b815481526020019060010190808311611166575b505050505081526020019060010190611122565b5050505081526020016006820180546111a69061264f565b80601f01602080910402602001604051908101604052809291908181526020018280546111d29061264f565b801561121f5780601f106111f45761010080835404028352916020019161121f565b820191906000526020600020905b81548152906001019060200180831161120257829003601f168201915b5050505050815250508152505081526020019060010190610c6c565b5050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561129c57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161127e575b5050505050815250509050919050565b50805460008255600e02906000526020600020908101906112cd9190611316565b50565b604080516101008101825260008082526020820181905291810182905260608082018390526080820183905260a082019290925260c0810182905260e081019190915290565b808211156113cf5780546001600160a01b0319908116825560018201805482169055600282018054909116905560006003820181905561135960048301826113d3565b61136760058301600061140f565b611375600683016000611430565b60006007830181815560088401829055600984018290559061139a600a850182611451565b6113a860048301600061146f565b6113b660058301600061146f565b6113c46006830160006113d3565b505050600e01611316565b5090565b5080546113df9061264f565b6000825580601f106113f157506112cd565b601f0160209004906000526020600020908101906112cd919061148d565b50805460008255600502906000526020600020908101906112cd91906114a2565b50805460008255600402906000526020600020908101906112cd91906114e1565b50805460008255906000526020600020908101906112cd919061148d565b50805460008255906000526020600020908101906112cd9190611535565b5b808211156113cf576000815560010161148e565b808211156113cf57600080825560018201805462ffffff1916905560028201819055600382018190556114d860048301826113d3565b506005016114a2565b808211156113cf5780547fffffffffffffffffffff000000000000000000000000000000000000000000001681556000600182018190556002820181905561152c60038301826113d3565b506004016114e1565b808211156113cf5760006115498282611451565b50600101611535565b60008083601f840112611563578182fd5b50813567ffffffffffffffff81111561157a578182fd5b602083019150836020808302850101111561159457600080fd5b9250929050565b6000602082840312156115ac578081fd5b81516115b781612bec565b9392505050565b6000602082840312156115cf578081fd5b81516115b781612c01565b6000602082840312156115eb578081fd5b5035919050565b600080600060408486031215611606578182fd5b83359250602084013567ffffffffffffffff811115611623578283fd5b61162f86828701611552565b9497909650939450505050565b6000806040838503121561164e578182fd5b50508035926020909101359150565b60008060008060608587031215611672578081fd5b84359350602085013561168481612bec565b9250604085013567ffffffffffffffff81111561169f578182fd5b6116ab87828801611552565b95989497509550505050565b6001600160a01b03169052565b6000815180845260208085019450808401835b838110156116fc5781516001600160a01b0316875295820195908201906001016116d7565b509495945050505050565b60008282518085526020808601955080818302840101818601855b8481101561175057601f1986840301895261173e838351611b10565b98840198925090830190600101611722565b5090979650505050505050565b6000815480845260208085018081965082840281019150858552828520855b858110156117a55782840389526117938483611b3f565b9885019893506001918201910161177c565b5091979650505050505050565b6000815180845260208085018081965082840281019150828601855b858110156117a55782840389528151805115158552858101511515868601526040808201516001600160a01b031690860152606080820151908601526080808201519086015260a09081015160c09186018290529061182f81870183611b77565b9a87019a95505050908401906001016117ce565b6000815480845260208085018081965082840281019150858552828520855b858110156117a557828403895260c0825460ff8082161515875261188d888801828460081c16611b71565b506118a7604087016001600160a01b038360101c166116b7565b5060018301546060860152600283015460808601528060a08601526118d181860160038501611bc2565b9986019994505060049190910190600101611862565b6000815180845260208085018081965082840281019150828601855b858110156117a557828403895281516101006119208683516116b7565b86820151611930888801826116b7565b50604080830151611943828901826116b7565b50506060808301518188015250608080830151828289015261196783890182611b77565b9250505060a0808301518783038289015261198283826119cf565b9250505060c0808301518783038289015261199d83826117b2565b9250505060e080830151925086820381880152506119bb8183611c39565b9a87019a9550505090840190600101611903565b6000815180845260208085018081965082840281019150828601855b858110156117a55782840389528151805185528581015115158686015260408082015115159086015260608082015160ff16908601526080808201519086015260a0808201519086015260c09081015160e091860182905290611a5081870183611b77565b9a87019a95505050908401906001016119eb565b6000815480845260208085018081965082840281019150858552828520855b858110156117a557828403895260e082548552600183015460ff611aab888801828416611b71565b611abd60408801828460081c16611b71565b611acf60608801828460101c16611d3e565b505060028301546080860152600383015460a08601528060c0860152611afa81860160048501611bc2565b9986019994505060059190910190600101611a83565b6000815180845260208085019450808401835b838110156116fc57815187529582019590820190600101611b23565b6000815480845260208085019450838352808320835b838110156116fc57815487529582019560019182019101611b55565b15159052565b60008151808452815b81811015611b9c57602081850181015186830182015201611b80565b81811115611bad5782602083870101525b50601f01601f19169290920160200192915050565b60008154611bcf8161264f565b808552602060018381168015611bec5760018114611c0057611c2e565b60ff19851688840152604088019550611c2e565b866000528260002060005b85811015611c265781548a8201860152908301908401611c0b565b890184019650505b505050505092915050565b6000815183526020820151602084015260408201516040840152606082015160e06060850152611c6c60e0850182611b10565b905060808301518482036080860152611c858282611707565b91505060a083015184820360a0860152611c9f8282611707565b91505060c083015184820360c0860152611cb98282611b77565b95945050505050565b600081548352600182015460208401526002820154604084015260e06060840152611cf360e0840160038401611b3f565b8381036080850152611d08816004850161175d565b905083810360a0850152611d1f816005850161175d565b905083810360c0850152611d368160068501611bc2565b949350505050565b60ff169052565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015611d9a5783516001600160a01b031683529284019291840191600101611d75565b50909695505050505050565b90815260200190565b9182526001600160a01b0316602082015260400190565b60006001600160a01b038088168352866020840152808616604084015280851660608401525060a06080830152611e0960a08301611e04855461223c565b6116b7565b611e16600184015461223c565b611e2360c08401826116b7565b50611e31600284015461223c565b611e3e60e08401826116b7565b50600383015461010083810191909152610120830152611e656101a0830160048501611bc2565b609f198084830301610140850152611e808260058701611a64565b91508084830301610160850152611e9a8260068701611843565b9150808483030161018085015250611eb58160078601611cc2565b98975050505050505050565b6020808252600f908201527f496e76616c696420616464726573730000000000000000000000000000000000604082015260600190565b60208082526019908201527f536f6c7574696f6e20616c726561647920657865637574656400000000000000604082015260600190565b60208082526010908201527f57726f6e672070726f706f73616c496400000000000000000000000000000000604082015260600190565b60208082526024908201527f536f6c7574696f6e734875623a3a5468697320494420616c726561647920657860408201527f6973747300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f50726f706f73616c206973206e6f742076616c69642061742070726f706f736160408201527f6c48756200000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f4e6f7420636f72726563742070726f706f73616c487562000000000000000000604082015260600190565b60208082526018908201527f536f6c7574696f6e734875623a206f6e6c794b65657065720000000000000000604082015260600190565b60006020825282511515602083015260208301516120af60408401826116b7565b5060408301516120c260608401826116b7565b5060608301516120d560808401826116b7565b50608083015160a083015260a083015160c083015260c08301516101008060e08501526121066101208501836118e7565b915060e0850151601f19858403018286015261212283826116c4565b9695505050505050565b6000808335601e19843603018112612142578283fd5b83018035915067ffffffffffffffff82111561215c578283fd5b602090810192508102360382131561159457600080fd5b6000808335601e19843603018112612189578283fd5b83018035915067ffffffffffffffff8211156121a3578283fd5b60200191503681900382131561159457600080fd5b6000823560be198336030181126121cd578182fd5b9190910192915050565b6000823560de198336030181126121cd578182fd5b6000823560fe198336030181126121cd578182fd5b60009081526020902090565b60008219821115612220576122206126ce565b500190565b600082821015612237576122376126ce565b500390565b6001600160a01b031690565b5b8181101561225d5760008155600101612249565b5050565b6801000000000000000083111561227a5761227a6126e4565b8054838255808410156122b8576000828152602081208581019083015b808210156122b4576122a9838361270d565b600182019150612297565b5050505b50816122c382612201565b6000805b868110156122fa576122d9848761212c565b6122e581838688612a5e565b505060209390930192600192830192016122c7565b50505050505050565b6801000000000000000083111561231c5761231c6126e4565b8054838255808410156123cb577f3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600181831181161561235e5761235e6126ce565b6004828711821615612372576123726126ce565b600085815260208120909350878202810190828602015b808210156123c5578482556123a18586868501612bcd565b6123af858660028501612bcd565b6123bc8560038401612751565b90820190612389565b50505050505b50816123d682612201565b6000805b868110156122fa576123f66123ef85886121b8565b8385612a77565b60209390930192600492909201916001016123da565b68010000000000000000831115612425576124256126e4565b8054838255808410156124e2577f33333333333333333333333333333333333333333333333333333333333333336001818311811615612467576124676126ce565b600582871182161561247b5761247b6126ce565b600085815260208120909350878202810190828602015b808210156124dc576124a5858684612bcd565b84848301556124b8858660028501612bcd565b6124c6858660038501612bcd565b6124d38560048401612751565b90820190612492565b50505050505b50816124ed82612201565b6000805b868110156122fa5761250d61250685886121d7565b8385612b36565b60209390930192600592909201916001016124f1565b61252d838261270d565b818160005260208060002060005b868110156122fa5783358255928201926001918201910161253b565b67ffffffffffffffff83111561256f5761256f6126e4565b612579815461264f565b600080601f8611601f8411818117156125985761259586612201565b92505b80156125c7576020601f890104830160208910156125b35750825b6125c56020601f880104850182612248565b505b5080600181146125f3576000945087156125e2578387013594505b6125ec888661268a565b8655612645565b601f198816945082845b8681101561261d57888601358255602095860195600190920191016125fd565b508886101561263a57878501356000196008601f8c16021c191681555b506001600289020186555b5050505050505050565b60028104600182168061266357607f821691505b6020821081141561268457634e487b7160e01b600052602260045260246000fd5b50919050565b600019600883021c191660029091021790565b60006000198214156126b1576126b16126ce565b5060010190565b634e487b7160e01b600052600060045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561270781612bec565b92915050565b68010000000000000000821115612726576127266126e4565b80548282558083101561274c5781600052602060002061274a828201858301612248565b505b505050565b811561275f5761275f6126b8565b612769815461264f565b801561274c57601f811160018114612784576000835561274a565b6000838152602081206127a26020601f860104820160018301612248565b50838152602081206127b582825461268a565b85555550505050565b6001600160a01b0382166001600160a01b03198254161781555050565b60ff1981541660ff8315151681178255505050565b8135815560016020808401358284015560408401356002840155612817606085018561212c565b612825818360038801612523565b5050612834608085018561212c565b612842818360048801612261565b505061285160a085018561212c565b61285f818360058801612261565b50506006830161287260c0860186612173565b67ffffffffffffffff81111561288a5761288a6126e4565b612894835461264f565b600080601f8411601f8411818117156128b3576128b088612201565b92505b80156128df5788601f8701048301898710156128cc5750825b6128dd8a601f880104850182612248565b505b50806001811461290b576000945085156128fa578387013594505b612904868661268a565b8855612959565b601f198616945082845b8681101561293257888601358255948a0194908b01908a01612915565b508686101561294f57878501356000196008601f8a16021c191681555b5089600287020188555b505050505050505050505050565b813561297281612bec565b61297c81836127be565b50602082013561298b81612bec565b61299881600184016127be565b506129b16129a8604084016126fa565b600283016127be565b606082013560038201556129c86080830183612173565b6129d6818360048601612557565b50506129e560a083018361212c565b6129f381836005860161240c565b5050612a0260c083018361212c565b612a10818360068601612303565b505061225d612a2260e08401846121d7565b600783016127f0565b805461ff00191691151560081b61ff0016919091179055565b805462ff00008360101b1662ff0000198216178255505050565b8115612a6c57612a6c6126b8565b61274a848483612523565b8115612a8557612a856126b8565b8235612a9081612c01565b612a9a81836127db565b506020830135612aa981612c01565b612ab38183612a2b565b506040830135612ac281612bec565b81547fffffffffffffffffffff0000000000000000000000000000000000000000ffff1660109190911b75ffffffffffffffffffffffffffffffffffffffff0000161781556060830135600182015560808301356002820155612b2860a0840184612173565b610a8d818360038601612557565b8115612b4457612b446126b8565b82358155600181016020840135612b5a81612c01565b612b6481836127db565b506040840135612b7381612c01565b612b7d8183612a2b565b50606084013560ff81168114612b9257600080fd5b612b9c8183612a44565b50506080830135600282015560a08301356003820155612bbf60c0840184612173565b610a8d818360048601612557565b805460088302600019811b8086831b1681198416178455505050505050565b6001600160a01b03811681146112cd57600080fd5b80151581146112cd57600080fdfea264697066735822122016f942f2c1bbb2d991fc5a309c36fb693eae9599cf968f0bfca45b46e7dd3fb364736f6c63430008000033";

export class SolutionsHub__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _conditionalTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SolutionsHub> {
    return super.deploy(
      _conditionalTokens,
      overrides || {}
    ) as Promise<SolutionsHub>;
  }
  getDeployTransaction(
    _conditionalTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_conditionalTokens, overrides || {});
  }
  attach(address: string): SolutionsHub {
    return super.attach(address) as SolutionsHub;
  }
  connect(signer: Signer): SolutionsHub__factory {
    return super.connect(signer) as SolutionsHub__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolutionsHubInterface {
    return new utils.Interface(_abi) as SolutionsHubInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SolutionsHub {
    return new Contract(address, _abi, signerOrProvider) as SolutionsHub;
  }
}
