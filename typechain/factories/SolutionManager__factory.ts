/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SolutionManager,
  SolutionManagerInterface,
} from "../SolutionManager";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "solutionId",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "solvableId",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "outcomes",
        type: "uint256[]",
      },
    ],
    name: "reportOutcomes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610174806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bcabeae414610030575b600080fd5b61004a600480360381019061004591906100b1565b61004c565b005b50505050565b60008083601f84011261006457600080fd5b8235905067ffffffffffffffff81111561007d57600080fd5b60208301915083602082028301111561009557600080fd5b9250929050565b6000813590506100ab81610127565b92915050565b600080600080606085870312156100c757600080fd5b60006100d58782880161009c565b94505060206100e68782880161009c565b935050604085013567ffffffffffffffff81111561010357600080fd5b61010f87828801610052565b925092505092959194509250565b6000819050919050565b6101308161011d565b811461013b57600080fd5b5056fea26469706673582212208f9406b0eee71b46a2800067d5a563a152a9f96ad57e4c90f40d929e4bff7f4864736f6c63430008000033";

export class SolutionManager__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SolutionManager> {
    return super.deploy(overrides || {}) as Promise<SolutionManager>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SolutionManager {
    return super.attach(address) as SolutionManager;
  }
  connect(signer: Signer): SolutionManager__factory {
    return super.connect(signer) as SolutionManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolutionManagerInterface {
    return new utils.Interface(_abi) as SolutionManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SolutionManager {
    return new Contract(address, _abi, signerOrProvider) as SolutionManager;
  }
}
