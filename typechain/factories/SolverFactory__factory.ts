/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SolverFactory, SolverFactoryInterface } from "../SolverFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newSolverAddress",
        type: "address",
      },
    ],
    name: "SolverCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_chainParent",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_chainIndex",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "contract Solver",
            name: "implementation",
            type: "address",
          },
          {
            internalType: "address",
            name: "keeper",
            type: "address",
          },
          {
            internalType: "address",
            name: "arbitrator",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timelockSeconds",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "executions",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isDeferred",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isConstant",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "dataType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "key",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "solverIndex",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "data",
                type: "bytes",
              },
            ],
            internalType: "struct SolverLib.Ingest[]",
            name: "ingests",
            type: "tuple[]",
          },
          {
            components: [
              {
                internalType: "contract IERC20",
                name: "collateralToken",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "outcomeSlots",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "parentCollectionPartitionIndex",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint256[]",
                name: "partition",
                type: "uint256[]",
              },
              {
                internalType: "uint256[]",
                name: "recipientAddressSlots",
                type: "uint256[]",
              },
              {
                internalType: "uint256[][]",
                name: "recipientAmountSlots",
                type: "uint256[][]",
              },
              {
                internalType: "string",
                name: "conditionURI",
                type: "string",
              },
            ],
            internalType: "struct SolverLib.ConditionBase",
            name: "conditionBase",
            type: "tuple",
          },
        ],
        internalType: "struct SolverLib.Config",
        name: "_solverConfig",
        type: "tuple",
      },
    ],
    name: "createSolver",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "solvers",
    outputs: [
      {
        internalType: "contract Solver",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061085b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806392ce765e1461003b578063e4445ce614610064575b600080fd5b61004e610049366004610316565b610077565b60405161005b91906105c3565b60405180910390f35b61004e610072366004610296565b6100a1565b6000818154811061008757600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806100b160208401846102f3565b6001600160a01b031614156100e15760405162461bcd60e51b81526004016100d8906106fe565b60405180910390fd5b60006100f86100f360208501856102f3565b6101df565b6040517ff43d32690000000000000000000000000000000000000000000000000000000081529091506001600160a01b0382169063f43d326990610144908890889088906004016105d7565b600060405180830381600087803b15801561015e57600080fd5b505af1158015610172573d6000803e3d6000fd5b5050600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038516179055509095945050505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09150506001600160a01b0381166102655760405162461bcd60e51b81526004016100d8906106c7565b919050565b80356102658161080d565b8035801515811461026557600080fd5b803560ff8116811461026557600080fd5b6000806000606084860312156102aa578283fd5b83356102b58161080d565b925060208401359150604084013567ffffffffffffffff8111156102d7578182fd5b840160e081870312156102e8578182fd5b809150509250925092565b600060208284031215610304578081fd5b813561030f8161080d565b9392505050565b600060208284031215610327578081fd5b5035919050565b6001600160a01b03169052565b818352602080840193600091908185020181018584845b87811015610388578284038952610369828861075b565b610374868284610474565b9a87019a9550505090840190600101610352565b5091979650505050505050565b818352602080840193600091908185020181018584845b87811015610388578284038952813560de198836030181126103cc578687fd5b87018035855260e08682013580151581146103e5578889fd5b6103f1888801826104c1565b5060406103ff818401610275565b61040b828901826104c1565b5050606061041a818401610285565b610426828901826105bc565b50506080828101359087015260a0808301359087015260c061044a818401846107aa565b9350828289015261045e83890185836104c7565b9c89019c975050509286019250506001016103ac565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156104a5578081fd5b6020830280836020870137939093016020019283525090919050565b15159052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000610100610508846105038561026a565b61032e565b602083013560208501526040830135604085015260608301356060850152610533608084018461075b565b8260808701526105468387018284610474565b9250505061055760a084018461075b565b85830360a087015261056a838284610474565b9250505061057b60c084018461075b565b85830360c087015261058e83828461033b565b9250505061059f60e08401846107aa565b85830360e08701526105b28382846104c7565b9695505050505050565b60ff169052565b6001600160a01b0391909116815260200190565b60006001600160a01b03851682528360208301526060604083015282356105fd8161080d565b61060a606084018261032e565b506106176020840161026a565b610624608084018261032e565b506106316040840161026a565b61063e60a084018261032e565b50606083013560c083015261065660808401846107aa565b60e08085015261066b610140850182846104c7565b91505061067b60a085018561075b565b605f198086850301610100870152610694848385610395565b93506106a360c08801886107ef565b9250808685030161012087015250506106bc82826104f1565b979650505050505050565b60208082526016908201527f455243313136373a20637265617465206661696c656400000000000000000000604082015260600190565b6020808252602d908201527f536f6c766572466163746f72793a3a496e76616c696420696d706c656d656e7460408201527f6174696f6e206164647265737300000000000000000000000000000000000000606082015260800190565b6000808335601e19843603018112610771578283fd5b830160208101925035905067ffffffffffffffff81111561079157600080fd5b6020810236038313156107a357600080fd5b9250929050565b6000808335601e198436030181126107c0578283fd5b830160208101925035905067ffffffffffffffff8111156107e057600080fd5b8036038313156107a357600080fd5b6000823560fe19833603018112610804578182fd5b90910192915050565b6001600160a01b038116811461082257600080fd5b5056fea26469706673582212206db27a2c47b845ed18aefad20015615f4ba75a410b40ccaf23e42aab46e6c31464736f6c63430008000033";

export class SolverFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SolverFactory> {
    return super.deploy(overrides || {}) as Promise<SolverFactory>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SolverFactory {
    return super.attach(address) as SolverFactory;
  }
  connect(signer: Signer): SolverFactory__factory {
    return super.connect(signer) as SolverFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SolverFactoryInterface {
    return new utils.Interface(_abi) as SolverFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SolverFactory {
    return new Contract(address, _abi, signerOrProvider) as SolverFactory;
  }
}
