/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConditionalTokensEventEmitter,
  ConditionalTokensEventEmitterInterface,
} from "../ConditionalTokensEventEmitter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "questionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "outcomeSlotCount",
        type: "uint256",
      },
    ],
    name: "ConditionPreparation",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "questionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "outcomeSlotCount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "payoutNumerators",
        type: "uint256[]",
      },
    ],
    name: "ConditionResolution",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "redeemer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "collateralToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentCollectionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "indexSets",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "payout",
        type: "uint256",
      },
    ],
    name: "PayoutRedemption",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeholder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "collateralToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentCollectionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "partition",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PositionSplit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "stakeholder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "contract IERC20",
        name: "collateralToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "parentCollectionId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "bytes32",
        name: "conditionId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "partition",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PositionsMerge",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212209928cc9227f5cd52bfe09dcb9e3feddd992e6640310b828431719865a981c20c64736f6c63430008000033";

export class ConditionalTokensEventEmitter__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ConditionalTokensEventEmitter> {
    return super.deploy(
      overrides || {}
    ) as Promise<ConditionalTokensEventEmitter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ConditionalTokensEventEmitter {
    return super.attach(address) as ConditionalTokensEventEmitter;
  }
  connect(signer: Signer): ConditionalTokensEventEmitter__factory {
    return super.connect(signer) as ConditionalTokensEventEmitter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConditionalTokensEventEmitterInterface {
    return new utils.Interface(_abi) as ConditionalTokensEventEmitterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConditionalTokensEventEmitter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ConditionalTokensEventEmitter;
  }
}
