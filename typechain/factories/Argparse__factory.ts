/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Argparse, ArgparseInterface } from "../Argparse";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "encodeAddress",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_bytes",
        type: "bytes32",
      },
    ],
    name: "encodeBytes32",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_uint",
        type: "uint256",
      },
    ],
    name: "encodeUint",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "ingestByteStream",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "parseAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "parseBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_data",
        type: "bytes32",
      },
    ],
    name: "parseUint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061047f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a1f07d171161005b578063a1f07d17146100e0578063ab831144146100e0578063d30c0a6414610100578063d32b1bea146101135761007d565b806324fcb80c146100825780633ff4a90a146100ab57806363d380a9146100c0575b600080fd5b61009561009036600461028e565b610126565b6040516100a2919061038f565b60405180910390f35b6100be6100b93660046102a6565b61012c565b005b6100d36100ce36600461028e565b61016f565b6040516100a291906103b9565b6100f36100ee36600461028e565b61019b565b6040516100a291906103b0565b6100d361010e36600461028e565b61019e565b6100d3610121366004610253565b6101b4565b60601c90565b61016b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101ca92505050565b5050565b606060008260405160200161018592919061035a565b6040516020818303038152906040529050919050565b90565b606060028260405160200161018592919061035a565b6060600182604051602001610185929190610313565b6000808060015b845181101561024c576101e581602061040c565b91508085015193508185015192508360ff166000141561020e576102088361019b565b5061023a565b8360ff16600114156102235761020883610126565b8360ff166002141561023a576102388361019b565b505b61024581604061040c565b90506101d1565b5050505050565b600060208284031215610264578081fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610287578182fd5b9392505050565b60006020828403121561029f578081fd5b5035919050565b600080602083850312156102b8578081fd5b823567ffffffffffffffff808211156102cf578283fd5b818501915085601f8301126102e2578283fd5b8135818111156102f0578384fd5b866020828501011115610301578384fd5b60209290920196919550909350505050565b60f89290921b7fff0000000000000000000000000000000000000000000000000000000000000016825260601b6bffffffffffffffffffffffff1916600182015260150190565b60f89290921b7fff00000000000000000000000000000000000000000000000000000000000000168252600182015260210190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b90815260200190565b6000602080835283518082850152825b818110156103e5578581018301518582016040015282016103c9565b818111156103f65783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610444577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b50019056fea26469706673582212208734ce9faf2db5c7de5c27bae2df53b7ffd3fb335e6299c4310b9874cfe7bba564736f6c63430008000033";

export class Argparse__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Argparse> {
    return super.deploy(overrides || {}) as Promise<Argparse>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Argparse {
    return super.attach(address) as Argparse;
  }
  connect(signer: Signer): Argparse__factory {
    return super.connect(signer) as Argparse__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArgparseInterface {
    return new utils.Interface(_abi) as ArgparseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Argparse {
    return new Contract(address, _abi, signerOrProvider) as Argparse;
  }
}
