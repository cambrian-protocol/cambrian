/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SolverFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createSolver(address,uint256,tuple)": FunctionFragment;
    "solvers(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createSolver",
    values: [
      string,
      BigNumberish,
      {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          dataType: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionIndexSet: BigNumberish;
          amountSlot: BigNumberish;
          partition: BigNumberish[];
          recipientAddressSlots: BigNumberish[];
          recipientAmountSlots: BigNumberish[][];
          conditionURI: string;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "solvers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solvers", data: BytesLike): Result;

  events: {
    "SolverCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SolverCreated"): EventFragment;
}

export class SolverFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SolverFactoryInterface;

  functions: {
    createSolver(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          dataType: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionIndexSet: BigNumberish;
          amountSlot: BigNumberish;
          partition: BigNumberish[];
          recipientAddressSlots: BigNumberish[];
          recipientAmountSlots: BigNumberish[][];
          conditionURI: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solvers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  createSolver(
    _chainParent: string,
    _chainIndex: BigNumberish,
    _solverConfig: {
      implementation: string;
      keeper: string;
      arbitrator: string;
      timelockSeconds: BigNumberish;
      data: BytesLike;
      ingests: {
        executions: BigNumberish;
        isDeferred: boolean;
        isConstant: boolean;
        dataType: BigNumberish;
        key: BigNumberish;
        solverIndex: BigNumberish;
        data: BytesLike;
      }[];
      conditionBase: {
        collateralToken: string;
        outcomeSlots: BigNumberish;
        parentCollectionIndexSet: BigNumberish;
        amountSlot: BigNumberish;
        partition: BigNumberish[];
        recipientAddressSlots: BigNumberish[];
        recipientAmountSlots: BigNumberish[][];
        conditionURI: string;
      };
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solvers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createSolver(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          dataType: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionIndexSet: BigNumberish;
          amountSlot: BigNumberish;
          partition: BigNumberish[];
          recipientAddressSlots: BigNumberish[];
          recipientAmountSlots: BigNumberish[][];
          conditionURI: string;
        };
      },
      overrides?: CallOverrides
    ): Promise<string>;

    solvers(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    SolverCreated(
      newSolverAddress?: null
    ): TypedEventFilter<[string], { newSolverAddress: string }>;
  };

  estimateGas: {
    createSolver(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          dataType: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionIndexSet: BigNumberish;
          amountSlot: BigNumberish;
          partition: BigNumberish[];
          recipientAddressSlots: BigNumberish[];
          recipientAmountSlots: BigNumberish[][];
          conditionURI: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solvers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createSolver(
      _chainParent: string,
      _chainIndex: BigNumberish,
      _solverConfig: {
        implementation: string;
        keeper: string;
        arbitrator: string;
        timelockSeconds: BigNumberish;
        data: BytesLike;
        ingests: {
          executions: BigNumberish;
          isDeferred: boolean;
          isConstant: boolean;
          dataType: BigNumberish;
          key: BigNumberish;
          solverIndex: BigNumberish;
          data: BytesLike;
        }[];
        conditionBase: {
          collateralToken: string;
          outcomeSlots: BigNumberish;
          parentCollectionIndexSet: BigNumberish;
          amountSlot: BigNumberish;
          partition: BigNumberish[];
          recipientAddressSlots: BigNumberish[];
          recipientAmountSlots: BigNumberish[][];
          conditionURI: string;
        };
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solvers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
