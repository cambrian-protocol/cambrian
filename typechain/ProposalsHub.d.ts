/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ProposalsHubInterface extends ethers.utils.Interface {
  functions: {
    "approveERC20Transfer(bytes32,address)": FunctionFragment;
    "createProposal(address,address,uint256,bytes32)": FunctionFragment;
    "defundProposal(bytes32,address,uint256)": FunctionFragment;
    "executeProposal(bytes32)": FunctionFragment;
    "fundProposal(bytes32,address,uint256)": FunctionFragment;
    "getProposal(bytes32)": FunctionFragment;
    "isProposal(bytes32)": FunctionFragment;
    "proposals(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveERC20Transfer",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defundProposal",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundProposal",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveERC20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defundProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;

  events: {
    "CreateProposal(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateProposal"): EventFragment;
}

export class ProposalsHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ProposalsHubInterface;

  functions: {
    approveERC20Transfer(
      _proposalId: BytesLike,
      _solver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      _collateralToken: string,
      _solutionsHub: string,
      _fundingGoal: BigNumberish,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeProposal(
      _proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          collateralToken: string;
          proposer: string;
          solutionsHub: string;
          primeSolver: string;
          id: string;
          solutionId: string;
          funding: BigNumber;
          fundingGoal: BigNumber;
        }
      ] & {
        proposal: [
          string,
          string,
          string,
          string,
          string,
          string,
          BigNumber,
          BigNumber
        ] & {
          collateralToken: string;
          proposer: string;
          solutionsHub: string;
          primeSolver: string;
          id: string;
          solutionId: string;
          funding: BigNumber;
          fundingGoal: BigNumber;
        };
      }
    >;

    isProposal(_id: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber, BigNumber] & {
        collateralToken: string;
        proposer: string;
        solutionsHub: string;
        primeSolver: string;
        id: string;
        solutionId: string;
        funding: BigNumber;
        fundingGoal: BigNumber;
      }
    >;
  };

  approveERC20Transfer(
    _proposalId: BytesLike,
    _solver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    _collateralToken: string,
    _solutionsHub: string,
    _fundingGoal: BigNumberish,
    _solutionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defundProposal(
    _proposalId: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeProposal(
    _proposalId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fundProposal(
    _proposalId: BytesLike,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    _id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, BigNumber, BigNumber] & {
      collateralToken: string;
      proposer: string;
      solutionsHub: string;
      primeSolver: string;
      id: string;
      solutionId: string;
      funding: BigNumber;
      fundingGoal: BigNumber;
    }
  >;

  isProposal(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  proposals(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, BigNumber, BigNumber] & {
      collateralToken: string;
      proposer: string;
      solutionsHub: string;
      primeSolver: string;
      id: string;
      solutionId: string;
      funding: BigNumber;
      fundingGoal: BigNumber;
    }
  >;

  callStatic: {
    approveERC20Transfer(
      _proposalId: BytesLike,
      _solver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      _collateralToken: string,
      _solutionsHub: string,
      _fundingGoal: BigNumberish,
      _solutionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    defundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeProposal(
      _proposalId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    fundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposal(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber, BigNumber] & {
        collateralToken: string;
        proposer: string;
        solutionsHub: string;
        primeSolver: string;
        id: string;
        solutionId: string;
        funding: BigNumber;
        fundingGoal: BigNumber;
      }
    >;

    isProposal(_id: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string, BigNumber, BigNumber] & {
        collateralToken: string;
        proposer: string;
        solutionsHub: string;
        primeSolver: string;
        id: string;
        solutionId: string;
        funding: BigNumber;
        fundingGoal: BigNumber;
      }
    >;
  };

  filters: {
    CreateProposal(id?: null): TypedEventFilter<[string], { id: string }>;
  };

  estimateGas: {
    approveERC20Transfer(
      _proposalId: BytesLike,
      _solver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createProposal(
      _collateralToken: string,
      _solutionsHub: string,
      _fundingGoal: BigNumberish,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeProposal(
      _proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposal(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isProposal(_id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    proposals(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveERC20Transfer(
      _proposalId: BytesLike,
      _solver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      _collateralToken: string,
      _solutionsHub: string,
      _fundingGoal: BigNumberish,
      _solutionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      _proposalId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fundProposal(
      _proposalId: BytesLike,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposal(
      _id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
